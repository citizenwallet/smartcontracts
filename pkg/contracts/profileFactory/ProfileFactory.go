// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package profileFactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ProfileFactoryMetaData contains all meta data concerning the ProfileFactory contract.
var ProfileFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"profile\",\"type\":\"address\"}],\"name\":\"ProfileCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contractProfile\",\"name\":\"profile\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profileImplementation\",\"outputs\":[{\"internalType\":\"contractProfile\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a0806040523461007e57612f2e8181016001600160401b03811183821017610068578291610944833903906000f0801561005c576080526040516108c09081610084823960805181818160820152818161025501526103f80152f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c80630ecaea73146100b1578063947aa29d1461006c5763b464631b1461003e57600080fd5b34610069576020610057610051366100cb565b90610358565b6040516001600160a01b039091168152f35b80fd5b50346100695780600319360112610069576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346100695760206100576100c5366100cb565b906101a8565b60409060031901126100f1576004356001600160a01b03811681036100f1579060243590565b600080fd5b6040810190811067ffffffffffffffff82111761011257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761011257604052565b60005b83811061015d5750506000910152565b818101518382015260200161014d565b909160609260018060a01b031682526040602083015261019c815180928160408601526020868601910161014a565b601f01601f1916010190565b91906101b48184610358565b803b61034a575060409081516101ff816101f16020820194888690916034926bffffffffffffffffffffffff199060601b16825260148201520190565b03601f198101835282610128565b5190209080519363204a7f0760e21b602086015260048552610220856100f6565b8151610416938482019667ffffffffffffffff95838910878a111761011257839161027c9161047584396001600160a01b03997f00000000000000000000000000000000000000000000000000000000000000008b169061016d565b0360009283f5801561033e57861695863b1561033a57835163f2fde38b60e01b8152921660048301819052938183602481838b5af18015610330576102ea575b50505060207f0e3805ab5ed81d70cc14ca89a9d933b5cb074fe2cd9a0c48c3c4a6f404304bbc9151858152a2565b821161031c5750815260207f0e3805ab5ed81d70cc14ca89a9d933b5cb074fe2cd9a0c48c3c4a6f404304bbc386102bc565b634e487b7160e01b81526041600452602490fd5b84513d84823e3d90fd5b5080fd5b508251903d90823e3d90fd5b6001600160a01b0316925050565b6040805160609290921b6bffffffffffffffffffffffff19166020808401918252603480850195909552938352605593600b93601f19929061039b605482610128565b5190209161045061045c83610416938751906103b983870183610128565b858252828201956104758739885163204a7f0760e21b8482015260048152906103e1826100f6565b61042a8a51918261041e8782019560018060a01b037f0000000000000000000000000000000000000000000000000000000000000000168761016d565b03908101835282610128565b8951958693610441868601998a925192839161014a565b8401915180938684019061014a565b01038084520182610128565b5190208351938401528201523081520160ff8153209056fe604060808152610416908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160d190816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe608060405236156054577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f3fea2646970667358221220044b95600c5a8b16f58ad7053fc82847c6e00cbcad98e443169bf78d6395632364736f6c63430008140033a264697066735822122049dac8bc97ec7ea5d22e0cb1de95820fad8fd977c2947ea248238c24c268769b64736f6c6343000814003360a080604052346100dd57306080526000549060ff8260081c1661008b575060ff80821603610050575b604051612e4b9081620000e3823960805181818161125a0152818161134601526118900152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610029565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a714611e045750806306fdde0314611d5a578063081812fc14611d3a578063095ea7b314611bca57806323b872dd14611ba0578063248a9ca314611b765780632f2ff15d14611aca57806336568abe14611a385780633659cfe61461186957806342842e0e1461184057806342966c68146115a55780634f1ef2861461130757806352d1902d1461124557806352f33682146112125780635971834a146111d75780636352211e146111a657806370a0823114611110578063715018a6146110b35780638129fc1c14610c3f578063892195aa14610c115780638da5cb5b14610be857806391d1485414610ba257806395d89b4114610abd57806398cd54be14610a965780639d91dd7d14610528578063a217fddf1461050d578063a22cb46514610440578063b88d4fde146103ec578063be83cdc91461036b578063c2bc2efc1461033b578063c87b56dd14610300578063d547741f146102c5578063e985e9c514610275578063ee91877c146102385763f2fde38b146101a457600080fd5b34610234576020366003190112610234576101bd611eec565b916101c661243b565b6001600160a01b038316156101e257836101df84612493565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5050346102715760203660031901126102715760209181906001600160a01b03610260611eec565b168152610191845220549051908152f35b5080fd5b505034610271578060031936011261027157602091610292611eec565b8261029b611f07565b9260018060a01b038093168152606a8652209116600052825260ff81600020541690519015158152f35b5090346102345780600319360112610234576101df91356102fb60016102e9611f07565b9383875260fb602052862001546120af565b6123c5565b509134610338576020366003190112610338575061032161033492356125d8565b9051918291602083526020830190611ec7565b0390f35b80fd5b50503461027157602036600319011261027157610334906103216001600160a01b03610365611eec565b166125d8565b5082346103385760203660031901126103385781358152610192602052829020546001600160a01b03169081156103a95761033483610321846125d8565b606490602084519162461bcd60e51b8352820152601d60248201527f5468697320757365726e616d6520646f6573206e6f742065786973742e0000006044820152fd5b83823461027157608036600319011261027157610407611eec565b61040f611f07565b9060643567ffffffffffffffff811161043c576101df9361043291369101612031565b916044359161295c565b8480fd5b50903461023457806003193601126102345761045a611eec565b906024359182151580930361043c576001600160a01b0316923384146104cb5750338452606a602052808420836000526020528060002060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b6020606492519162461bcd60e51b8352820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b50503461027157816003193601126102715751908152602090f35b5091903461027157606036600319011261027157610544611eec565b92602480359367ffffffffffffffff9160443583811161023457366023820112156102345761057b90369083818801359101611ffa565b9060018060a01b03978860c9541633148015610a8b575b8015610a4d575b156109ee57881696878452610191602099818b5288862054908115908b82806109bf575b8315610994575b505050156109525760008a8152606760205260409020546001600160a01b031615610861575b8203610807575b50506105fc876125d8565b86516106248a82816106178183019687815193849201611ea4565b8101038084520182611fbc565b5190208651898101906106418b8287516106178187858c01611ea4565b51902003610653575b87878751908152f35b6000878152606760205260409020546001600160a01b0316156107af578683526097885285832094825194851161079e575050908291610693855461259e565b601f8111610765575b508791601f841160011461070257926106f7575b50508160011b916000199060031b1c19161790555b7ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7838251848152a1388080808061064a565b0151905038806106b0565b8581528881209350601f198516905b8982821061074f575050908460019594939210610736575b505050811b0190556106c5565b015160001960f88460031b161c19169055388080610729565b6001859682939686015181550195019301610711565b61078e90868452898420601f860160051c8101918b8710610794575b601f0160051c01906126b6565b3861069c565b9091508190610781565b634e487b7160e01b84526041905282fd5b84602e6084928a89519362461bcd60e51b85528401528201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152fd5b888552808a528785205480610843575b508185526101928a5287852080546001600160a01b0319168a17905588855289528684205538806105f1565b85526101928a5287852080546001600160a01b031916905538610817565b9489156109125760008a815260676020526040902054839190610890906001600160a01b031615155b15612a55565b60008b8152606760205260409020549096906108b6906001600160a01b0316151561088a565b8a60005260688c52896000206001815401905560678c52896000208b6001600160601b0360a01b8254161790558a8060007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a490506105ea565b6064888c86818d519362461bcd60e51b85528401528201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b885162461bcd60e51b81528089018c9052601f818601527f5468697320757365726e616d6520697320616c72656164792074616b656e2e006044820152606490fd5b15925090826109a8575b5050388b816105c4565b8389526101928e528b892054161490508a3861099e565b9250508488526101928d528b818c8a2054168181159182156109e4575b5050926105bd565b14905081386109dc565b865162461bcd60e51b81526020818801526034818401527f4f6e6c79207468652070726f66696c65206f776e6572206f7220636f6e74726160448201527331ba1037bbb732b91031b0b71039b2ba1034ba1760611b6064820152608490fd5b507f224b562a599bb6f57441f98a50de513dff0de3d9b620f342c27a4e4a898ce8e2845260fb60205286842033855260205260ff8785205416610599565b503389821614610592565b509034610234576020366003190112610234575190356001600160a01b0316815260209150f35b50503461027157816003193601126102715780519082606654610adf8161259e565b80855291600191808316908115610b7a5750600114610b1d575b505050610b0b82610334940383611fbc565b51918291602083526020830190611ec7565b9450606685527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943545b828610610b6257505050610b0b8260206103349582010194610af9565b80546020878701810191909152909501948101610b45565b610334975086935060209250610b0b94915060ff191682840152151560051b82010194610af9565b50346102345781600319360112610234578160209360ff92610bc2611f07565b9035825260fb86528282206001600160a01b039091168252855220549151911615158152f35b50503461027157816003193601126102715760c95490516001600160a01b039091168152602090f35b505034610271576020366003190112610271576020906001600160a01b03610c37611eec565b169051908152f35b5034610234578260031936011261023457825460ff90818160081c1615908180926110a7575b8015611091575b156110375760019260ff19918385848316178955611026575b50855194610c9286611fa0565b600786526020956650726f66696c6560c81b878201528751610cb381611fa0565b600381526228292360e91b88820152610cda848b5460081c16610cd58161204f565b61204f565b81519267ffffffffffffffff9384811161101357808c610cfb60655461259e565b95601f968d888211610fc7575b50508c91878411600114610f465792610f3b575b5050600019600383901b1c191690891b176065555b8151938411610f285750908291610d4960665461259e565b828111610ed3575b5088918311600114610e54578a92610e49575b5050600019600383901b1c191690851b176066555b610d8c81885460081c16610cd58161204f565b610d9533612493565b610da881885460081c16610cd58161204f565b86805260fb85528587203388528552858720541615610e02575b50610dcb578380f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989261ff0019855416855551908152a13880808380f35b85805260fb8452848620338752845282858720918254161790553333867f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a438610dc2565b015190503880610d64565b60668b528793507f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943549190601f1984168c5b8b828210610ebd5750508411610ea4575b505050811b01606655610d79565b015160001960f88460031b161c19169055388080610e96565b8385015186558b97909501949384019301610e85565b610f199060668d527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943548480870160051c8201928d8810610f1f575b0160051c01906126b6565b38610d51565b92508192610f0e565b634e487b7160e01b8b526041905260248afd5b015190503880610d1c565b606581528c94507f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7929190601f198516908f5b828210610fb05750508411610f97575b505050811b01606555610d31565b015160001960f88460031b161c19169055388080610f89565b8385015186558f979095019493840193018f610f79565b61100c9160658552897f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c79181880160051c8301938810610f1f570160051c01906126b6565b388d610d08565b634e487b7160e01b8c526041825260248cfd5b61ffff191661010117875538610c85565b845162461bcd60e51b8152602081860152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610c6c5750600183821614610c6c565b50600183821610610c65565b83346103385780600319360112610338576110cc61243b565b60c980546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50829034610271576020366003190112610271576001600160a01b03611134611eec565b169081156111515760208480858581526068845220549051908152f35b608490602085519162461bcd60e51b8352820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152fd5b50913461033857602036600319011261033857506111c660209235612899565b90516001600160a01b039091168152f35b505034610271578160031936011261027157602090517f224b562a599bb6f57441f98a50de513dff0de3d9b620f342c27a4e4a898ce8e28152f35b5034610234576020366003190112610234573582526101926020908152918190205490516001600160a01b039091168152f35b508234610338578060031936011261033857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361129f5760208251600080516020612df68339815191528152f35b6020608492519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b5090806003193601126102345761131c611eec565b9060243567ffffffffffffffff811161043c5761133c9036908501612031565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929190611376308514156124dc565b611393600080516020612df683398151915294828654161461253d565b61139b61243b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156113d357505050506101df91506126f4565b8491929394168351946352d1902d60e01b865260209586818981865afa899181611572575b5061145757855162461bcd60e51b8152808901889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b969192949593960361151d5750908591611470846126f4565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a2845115801590611515575b6114ac575b505050505080f35b61150a948291660819985a5b195960ca1b8651966114c988611f84565b602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c8389015287015281519101845af4611504612784565b916127b4565b5038808083816114a4565b50600161149f565b845162461bcd60e51b8152908101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508781813d831161159e575b61158a8183611fbc565b8101031261159a575190386113f8565b8980fd5b503d611580565b5091903461027157602090816003193601126102345760c9546001600160a01b03853581811696909233908316148015611837575b80156117fb575b1561179c578686526101918086528487205487526101928652848720976001600160601b0360a01b988981541690558752855285848120558161162384612899565b16158015611794575b156117055750848096839261164084612899565b848452606988528684208381541690551690818352606887528583206000198154019055838352606787528583209081541690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a4609783526116a88285205461259e565b6116b157505050f35b8352609782528220906116c4825461259e565b90816116cf57505050f35b8390601f83116001146116e3575050505580f35b838252812092909161170090601f0160051c8401600185016126b6565b555580f35b835162461bcd60e51b8152908101859052605b60248201527f54686973206120536f756c626f756e6420746f6b656e2e2049742063616e6e6f60448201527f74206265207472616e736665727265642e2049742063616e206f6e6c7920626560648201527f206275726e65642062792074686520746f6b656e206f776e65722e0000000000608482015260a490fd5b50600161162c565b835162461bcd60e51b8152908101859052603360248201527f4f6e6c7920746865206f776e6572206f662074686520746f6b656e206f7220706044820152723937b334b6329031b0b710313ab9371034ba1760691b6064820152608490fd5b507f224b562a599bb6f57441f98a50de513dff0de3d9b620f342c27a4e4a898ce8e2865260fb8552838620338752855260ff84872054166115e1565b503387146115da565b505034610271576101df9061185436611f1d565b9192519261186184611f52565b85845261295c565b50903461023457602080600319360112611a3457611885611eec565b916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166118bd308214156124dc565b6118da600080516020612df683398151915291838354161461253d565b6118e261243b565b8251916118ee83611f52565b8783527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561192a5750505050506101df91506126f4565b8592939495169084516352d1902d60e01b815286818981865afa899181611a05575b506119ab57855162461bcd60e51b8152808901889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b969192949593960361151d57509085916119c4846126f4565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a28451158015906119fe576114ac57505050505080f35b508161149f565b9091508781813d8311611a2d575b611a1d8183611fbc565b8101031261159a5751903861194c565b503d611a13565b8380fd5b50829034610271578260031936011261027157611a53611f07565b90336001600160a01b03831603611a6f57906101df91356123c5565b608490602085519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b50346102345781600319360112610234573590611ae5611f07565b9082845260fb602052611afd600182862001546120af565b82845260fb60209081528185206001600160a01b039093168086529290528084205460ff1615611b2b578380f35b82845260fb6020528084208285526020528320600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8480a43880808380f35b5034610234576020366003190112610234578160209360019235815260fb85522001549051908152f35b8334610338576101df611bb236611f1d565b91611bc5611bc084336129e7565b6128fa565b612afb565b5034610234578160031936011261023457611be3611eec565b6024359290916001600160a01b0391908280611bfe87612899565b16941693808514611ced57803314908115611cce575b5015611c6657508385526069602052842080546001600160a01b03191683179055611c3e83612899565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b6020608492519162461bcd60e51b8352820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152fd5b90508652606a60205281862033875260205260ff828720541638611c14565b506020608492519162461bcd60e51b8352820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152fd5b50913461033857602036600319011261033857506111c6602092356128bc565b50503461027157816003193601126102715780519082606554611d7c8161259e565b80855291600191808316908115610b7a5750600114611da757505050610b0b82610334940383611fbc565b9450606585527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c75b828610611dec57505050610b0b8260206103349582010194610af9565b80546020878701810191909152909501948101611dcf565b92505034610234576020366003190112610234573563ffffffff60e01b81168091036102345760209250637965db0b60e01b8114908115611e47575b5015158152f35b632483248360e11b811491508115611e61575b5038611e40565b6380ac58cd60e01b811491508115611e93575b8115611e82575b5038611e5a565b6301ffc9a760e01b14905038611e7b565b635b5e139f60e01b81149150611e74565b60005b838110611eb75750506000910152565b8181015183820152602001611ea7565b90602091611ee081518092818552858086019101611ea4565b601f01601f1916010190565b600435906001600160a01b0382168203611f0257565b600080fd5b602435906001600160a01b0382168203611f0257565b6060906003190112611f02576001600160a01b03906004358281168103611f0257916024359081168103611f02579060443590565b6020810190811067ffffffffffffffff821117611f6e57604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff821117611f6e57604052565b6040810190811067ffffffffffffffff821117611f6e57604052565b90601f8019910116810190811067ffffffffffffffff821117611f6e57604052565b67ffffffffffffffff8111611f6e57601f01601f191660200190565b92919261200682611fde565b916120146040519384611fbc565b829481845281830111611f02578281602093846000960137010152565b9080601f83011215611f025781602061204c93359101611ffa565b90565b1561205657565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60009080825260209060fb8252604092838120338252835260ff8482205416156120d95750505050565b338451926120e684611f84565b602a845284840190863683378451156123b1576030825384519260019384101561239d576078602187015360295b84811161233357506122f1578651926080840184811067ffffffffffffffff8211176122dd578852604284528684019460603687378451156122c9576030865384518210156122c95790607860218601536041915b81831161225b57505050612219576122159386936121f9936121ea6048946121c19a519a8b957f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008c8801525180926037880190611ea4565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611ea4565b01036028810187520185611fbc565b5192839262461bcd60e51b845260048401526024830190611ec7565b0390fd5b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f811660108110156122b5576f181899199a1a9b1b9c1cb0b131b232b360811b901a61228b85886126cd565b5360041c9280156122a157600019019190612169565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b634e487b7160e01b86526041600452602486fd5b60648688519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f81166010811015612389576f181899199a1a9b1b9c1cb0b131b232b360811b901a61236183896126cd565b5360041c9080156123755760001901612114565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b87526032600452602487fd5b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b84526032600452602484fd5b9060009180835260fb602052604083209160018060a01b03169182845260205260ff6040842054166123f657505050565b80835260fb602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b60c9546001600160a01b0316330361244f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60c980546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b156124e357565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561254457565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b90600182811c921680156125ce575b60208310146125b857565b634e487b7160e01b600052602260045260246000fd5b91607f16916125ad565b6000818152606760205260409020546125fb906001600160a01b0316151561284d565b600090815260209060978252604081209160405180938390805461261e8161259e565b808552916001918083169081156126945750600114612657575b50505061264792500383611fbc565b60405161265381611f52565b5290565b86528486209492508591905b81831061267c5750506126479350820101388080612638565b85548884018501529485019487945091830191612663565b9250505061264794925060ff191682840152151560051b820101388080612638565b8181106126c1575050565b600081556001016126b6565b9081518110156126de570160200190565b634e487b7160e01b600052603260045260246000fd5b803b1561272957600080516020612df683398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b3d156127af573d9061279582611fde565b916127a36040519384611fbc565b82523d6000602084013e565b606090565b9192901561281657508151156127c8575090565b3b156127d15790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156128295750805190602001fd5b60405162461bcd60e51b815260206004820152908190612215906024830190611ec7565b1561285457565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152606760205260409020546001600160a01b031661204c81151561284d565b6000818152606760205260409020546128df906001600160a01b0316151561284d565b6000908152606960205260409020546001600160a01b031690565b1561290157565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b90612980939291612970611bc084336129e7565b61297b838383612afb565b612cb3565b1561298757565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b906001600160a01b0380806129fb84612899565b16931691838314938415612a2e575b508315612a18575b50505090565b612a24919293506128bc565b1614388080612a12565b909350600052606a60205260406000208260005260205260ff604060002054169238612a0a565b15612a5c57565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b15612aa857565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b90612b2391612b0984612899565b6001600160a01b0393918416928492909183168414612aa1565b16918215612c625781158015612c5a575b15612bc95781612b4e91612b4786612899565b1614612aa1565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008481526069602052604081206001600160601b0360a01b9081815416905583825260686020526040822060001981540190558482526040822060018154019055858252606760205284604083209182541617905580a4565b60405162461bcd60e51b815260206004820152605b60248201527f54686973206120536f756c626f756e6420746f6b656e2e2049742063616e6e6f60448201527f74206265207472616e736665727265642e2049742063616e206f6e6c7920626560648201527f206275726e65642062792074686520746f6b656e206f776e65722e0000000000608482015260a490fd5b506000612b34565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b919290803b15612dec57604051630a85bd0160e11b8082523360048301526001600160a01b03948516602483015260448201959095526080606482015291602091839182908190612d08906084830190611ec7565b03916000968791165af190829082612da4575b5050612d9657612d29612784565b80519081612d915760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b909192506020813d8211612de4575b81612dc060209383611fbc565b810103126102715751906001600160e01b0319821682036103385750903880612d1b565b3d9150612db3565b5050505060019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca264697066735822122093e920fde86f4751fa8cd9eb80485a648b04023ce527815a6a764e979c4bcac264736f6c63430008140033",
}

// ProfileFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use ProfileFactoryMetaData.ABI instead.
var ProfileFactoryABI = ProfileFactoryMetaData.ABI

// ProfileFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProfileFactoryMetaData.Bin instead.
var ProfileFactoryBin = ProfileFactoryMetaData.Bin

// DeployProfileFactory deploys a new Ethereum contract, binding an instance of ProfileFactory to it.
func DeployProfileFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ProfileFactory, error) {
	parsed, err := ProfileFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProfileFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ProfileFactory{ProfileFactoryCaller: ProfileFactoryCaller{contract: contract}, ProfileFactoryTransactor: ProfileFactoryTransactor{contract: contract}, ProfileFactoryFilterer: ProfileFactoryFilterer{contract: contract}}, nil
}

// ProfileFactory is an auto generated Go binding around an Ethereum contract.
type ProfileFactory struct {
	ProfileFactoryCaller     // Read-only binding to the contract
	ProfileFactoryTransactor // Write-only binding to the contract
	ProfileFactoryFilterer   // Log filterer for contract events
}

// ProfileFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProfileFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProfileFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProfileFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProfileFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProfileFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProfileFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProfileFactorySession struct {
	Contract     *ProfileFactory   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProfileFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProfileFactoryCallerSession struct {
	Contract *ProfileFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// ProfileFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProfileFactoryTransactorSession struct {
	Contract     *ProfileFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ProfileFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProfileFactoryRaw struct {
	Contract *ProfileFactory // Generic contract binding to access the raw methods on
}

// ProfileFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProfileFactoryCallerRaw struct {
	Contract *ProfileFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// ProfileFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProfileFactoryTransactorRaw struct {
	Contract *ProfileFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProfileFactory creates a new instance of ProfileFactory, bound to a specific deployed contract.
func NewProfileFactory(address common.Address, backend bind.ContractBackend) (*ProfileFactory, error) {
	contract, err := bindProfileFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ProfileFactory{ProfileFactoryCaller: ProfileFactoryCaller{contract: contract}, ProfileFactoryTransactor: ProfileFactoryTransactor{contract: contract}, ProfileFactoryFilterer: ProfileFactoryFilterer{contract: contract}}, nil
}

// NewProfileFactoryCaller creates a new read-only instance of ProfileFactory, bound to a specific deployed contract.
func NewProfileFactoryCaller(address common.Address, caller bind.ContractCaller) (*ProfileFactoryCaller, error) {
	contract, err := bindProfileFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProfileFactoryCaller{contract: contract}, nil
}

// NewProfileFactoryTransactor creates a new write-only instance of ProfileFactory, bound to a specific deployed contract.
func NewProfileFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*ProfileFactoryTransactor, error) {
	contract, err := bindProfileFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProfileFactoryTransactor{contract: contract}, nil
}

// NewProfileFactoryFilterer creates a new log filterer instance of ProfileFactory, bound to a specific deployed contract.
func NewProfileFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*ProfileFactoryFilterer, error) {
	contract, err := bindProfileFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProfileFactoryFilterer{contract: contract}, nil
}

// bindProfileFactory binds a generic wrapper to an already deployed contract.
func bindProfileFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ProfileFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProfileFactory *ProfileFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProfileFactory.Contract.ProfileFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProfileFactory *ProfileFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProfileFactory.Contract.ProfileFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProfileFactory *ProfileFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProfileFactory.Contract.ProfileFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProfileFactory *ProfileFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProfileFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProfileFactory *ProfileFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProfileFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProfileFactory *ProfileFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProfileFactory.Contract.contract.Transact(opts, method, params...)
}

// Get is a free data retrieval call binding the contract method 0xb464631b.
//
// Solidity: function get(address owner, uint256 salt) view returns(address)
func (_ProfileFactory *ProfileFactoryCaller) Get(opts *bind.CallOpts, owner common.Address, salt *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ProfileFactory.contract.Call(opts, &out, "get", owner, salt)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Get is a free data retrieval call binding the contract method 0xb464631b.
//
// Solidity: function get(address owner, uint256 salt) view returns(address)
func (_ProfileFactory *ProfileFactorySession) Get(owner common.Address, salt *big.Int) (common.Address, error) {
	return _ProfileFactory.Contract.Get(&_ProfileFactory.CallOpts, owner, salt)
}

// Get is a free data retrieval call binding the contract method 0xb464631b.
//
// Solidity: function get(address owner, uint256 salt) view returns(address)
func (_ProfileFactory *ProfileFactoryCallerSession) Get(owner common.Address, salt *big.Int) (common.Address, error) {
	return _ProfileFactory.Contract.Get(&_ProfileFactory.CallOpts, owner, salt)
}

// ProfileImplementation is a free data retrieval call binding the contract method 0x947aa29d.
//
// Solidity: function profileImplementation() view returns(address)
func (_ProfileFactory *ProfileFactoryCaller) ProfileImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ProfileFactory.contract.Call(opts, &out, "profileImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ProfileImplementation is a free data retrieval call binding the contract method 0x947aa29d.
//
// Solidity: function profileImplementation() view returns(address)
func (_ProfileFactory *ProfileFactorySession) ProfileImplementation() (common.Address, error) {
	return _ProfileFactory.Contract.ProfileImplementation(&_ProfileFactory.CallOpts)
}

// ProfileImplementation is a free data retrieval call binding the contract method 0x947aa29d.
//
// Solidity: function profileImplementation() view returns(address)
func (_ProfileFactory *ProfileFactoryCallerSession) ProfileImplementation() (common.Address, error) {
	return _ProfileFactory.Contract.ProfileImplementation(&_ProfileFactory.CallOpts)
}

// Create is a paid mutator transaction binding the contract method 0x0ecaea73.
//
// Solidity: function create(address owner, uint256 salt) returns(address profile)
func (_ProfileFactory *ProfileFactoryTransactor) Create(opts *bind.TransactOpts, owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _ProfileFactory.contract.Transact(opts, "create", owner, salt)
}

// Create is a paid mutator transaction binding the contract method 0x0ecaea73.
//
// Solidity: function create(address owner, uint256 salt) returns(address profile)
func (_ProfileFactory *ProfileFactorySession) Create(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _ProfileFactory.Contract.Create(&_ProfileFactory.TransactOpts, owner, salt)
}

// Create is a paid mutator transaction binding the contract method 0x0ecaea73.
//
// Solidity: function create(address owner, uint256 salt) returns(address profile)
func (_ProfileFactory *ProfileFactoryTransactorSession) Create(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _ProfileFactory.Contract.Create(&_ProfileFactory.TransactOpts, owner, salt)
}

// ProfileFactoryProfileCreatedIterator is returned from FilterProfileCreated and is used to iterate over the raw logs and unpacked data for ProfileCreated events raised by the ProfileFactory contract.
type ProfileFactoryProfileCreatedIterator struct {
	Event *ProfileFactoryProfileCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProfileFactoryProfileCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProfileFactoryProfileCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProfileFactoryProfileCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProfileFactoryProfileCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProfileFactoryProfileCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProfileFactoryProfileCreated represents a ProfileCreated event raised by the ProfileFactory contract.
type ProfileFactoryProfileCreated struct {
	Owner   common.Address
	Profile common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterProfileCreated is a free log retrieval operation binding the contract event 0x0e3805ab5ed81d70cc14ca89a9d933b5cb074fe2cd9a0c48c3c4a6f404304bbc.
//
// Solidity: event ProfileCreated(address indexed owner, address profile)
func (_ProfileFactory *ProfileFactoryFilterer) FilterProfileCreated(opts *bind.FilterOpts, owner []common.Address) (*ProfileFactoryProfileCreatedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _ProfileFactory.contract.FilterLogs(opts, "ProfileCreated", ownerRule)
	if err != nil {
		return nil, err
	}
	return &ProfileFactoryProfileCreatedIterator{contract: _ProfileFactory.contract, event: "ProfileCreated", logs: logs, sub: sub}, nil
}

// WatchProfileCreated is a free log subscription operation binding the contract event 0x0e3805ab5ed81d70cc14ca89a9d933b5cb074fe2cd9a0c48c3c4a6f404304bbc.
//
// Solidity: event ProfileCreated(address indexed owner, address profile)
func (_ProfileFactory *ProfileFactoryFilterer) WatchProfileCreated(opts *bind.WatchOpts, sink chan<- *ProfileFactoryProfileCreated, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _ProfileFactory.contract.WatchLogs(opts, "ProfileCreated", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProfileFactoryProfileCreated)
				if err := _ProfileFactory.contract.UnpackLog(event, "ProfileCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProfileCreated is a log parse operation binding the contract event 0x0e3805ab5ed81d70cc14ca89a9d933b5cb074fe2cd9a0c48c3c4a6f404304bbc.
//
// Solidity: event ProfileCreated(address indexed owner, address profile)
func (_ProfileFactory *ProfileFactoryFilterer) ParseProfileCreated(log types.Log) (*ProfileFactoryProfileCreated, error) {
	event := new(ProfileFactoryProfileCreated)
	if err := _ProfileFactory.contract.UnpackLog(event, "ProfileCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
