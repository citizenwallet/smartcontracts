// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package profileFactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ProfileFactoryMetaData contains all meta data concerning the ProfileFactory contract.
var ProfileFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"profile\",\"type\":\"address\"}],\"name\":\"ProfileCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contractProfile\",\"name\":\"profile\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profileImplementation\",\"outputs\":[{\"internalType\":\"contractProfile\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a0806040523461007e57612fc28181016001600160401b038111838210176100685782916108cd833903906000f0801561005c576080526040516108499081610084823960805181818160820152818161025001526103810152f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c80630ecaea73146100b1578063947aa29d1461006c5763b464631b1461003e57600080fd5b34610069576020610057610051366100cb565b906102c9565b6040516001600160a01b039091168152f35b80fd5b50346100695780600319360112610069576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346100695760206100576100c5366100cb565b906101a8565b60409060031901126100f1576004356001600160a01b03811681036100f1579060243590565b600080fd5b6060810190811067ffffffffffffffff82111761011257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761011257604052565b60005b83811061015d5750506000910152565b818101518382015260200161014d565b909160609260018060a01b031682526040602083015261019c815180928160408601526020868601910161014a565b601f01601f1916010190565b91906101b481846102c9565b803b6102bb57506040516bffffffffffffffffffffffff19606085901b16602082019081526034808301939093529181526101f0605482610128565b51902060405163189acdbd60e31b60208201526001600160a01b0393841660248083018290528252939190610224816100f6565b604051906104168083019183831067ffffffffffffffff841117610112578392610276926103fe8539867f0000000000000000000000000000000000000000000000000000000000000000169061016d565b03906000f580156102af5716917f0e3805ab5ed81d70cc14ca89a9d933b5cb074fe2cd9a0c48c3c4a6f404304bbc6020604051858152a2565b6040513d6000823e3d90fd5b6001600160a01b0316925050565b605591600b916040918251916103d96103e5602080948661030c83820192878490916034926bffffffffffffffffffffffff199060601b16825260148201520190565b0396610320601f1998898101835282610128565b51902095610416946103a76103b38a519361033d868a0186610128565b888552858501986103fe8a398b5163189acdbd60e31b878201526001600160a01b039485166024808301919091528152610376816100f6565b8c51938491888301967f0000000000000000000000000000000000000000000000000000000000000000168761016d565b03908101835282610128565b89519586936103ca868601998a925192839161014a565b8401915180938684019061014a565b01038084520182610128565b5190208351938401528201523081520160ff8153209056fe604060808152610416908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160d190816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe608060405236156054577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f3fea2646970667358221220044b95600c5a8b16f58ad7053fc82847c6e00cbcad98e443169bf78d6395632364736f6c63430008140033a2646970667358221220e70aaacff2c1dbaf2a9f56cc2fed7e7301e04239cb15a5d8c50c2a4f457534ab64736f6c6343000814003360a080604052346100dd57306080526000549060ff8260081c1661008b575060ff80821603610050575b604051612edf9081620000e382396080518181816112f2015281816113de01526119280152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610029565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a714611e985750806306fdde0314611dee578063081812fc14611dce578063095ea7b314611c5e57806323b872dd14611c34578063248a9ca314611c0a5780632f2ff15d14611b5e57806336568abe14611acc5780633659cfe61461190157806342842e0e146118d857806342966c681461163d5780634f1ef2861461139f57806352d1902d146112dd57806352f33682146112aa5780635971834a1461126f5780636352211e1461123e57806370a08231146111a8578063715018a61461114b578063892195aa1461111d5780638da5cb5b146110f457806391d14854146110ae57806395d89b4114610fc957806398cd54be14610fa25780639d91dd7d14610a34578063a217fddf14610a19578063a22cb4651461094c578063b88d4fde146108f8578063be83cdc914610877578063c2bc2efc14610847578063c4d66de81461033b578063c87b56dd14610300578063d547741f146102c5578063e985e9c514610275578063ee91877c146102385763f2fde38b146101a457600080fd5b34610234576020366003190112610234576101bd611f80565b916101c66124cf565b6001600160a01b038316156101e257836101df84612527565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5050346102715760203660031901126102715760209181906001600160a01b03610260611f80565b168152610191845220549051908152f35b5080fd5b505034610271578060031936011261027157602091610292611f80565b8261029b611f9b565b9260018060a01b038093168152606a8652209116600052825260ff81600020541690519015158152f35b5090346102345780600319360112610234576101df91356102fb60016102e9611f9b565b9383875260fb60205286200154612143565b612459565b5091346103385760203660031901126103385750610321610334923561266c565b9051918291602083526020830190611f5b565b0390f35b80fd5b5034610234576020908160031936011261084357610357611f80565b9084549160ff91828460081c161592838094610837575b8015610821575b156107c75760ff1980861660019081178a5595856107b6575b50875161039a81612034565b600781526650726f66696c6560c81b8882015288516103b881612034565b600381526228292360e91b898201526103df848c5460081c166103da816120e3565b6120e3565b815167ffffffffffffffff928382116107a35790808d8c9493610403606554612632565b601f96878211610757575b50508d918684116001146106cb57926106c0575b5050600019600383901b1c1916908a1b176065555b80519283116106ad579082918c8b610450606654612632565b848111610657575b5050508a9183116001146105d8578c926105cd575b5050600019600383901b1c191690871b176066555b610495828a5460081c166103da816120e3565b61049e33612527565b6104b1828a5460081c166103da816120e3565b88805260fb87528789206001600160a01b0385166000818152918952908990205490921615610584575b506104e46124cf565b1561053257506104f390612527565b6104fb578380f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989261ff0019855416855551908152a13880808380f35b855162461bcd60e51b8152908101859052602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b88805260fb87528789208260005287528588600020918254161790553381897f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4386104db565b01519050388061046d565b60668d528993507f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943549190601f1984168e5b8d8282106106415750508411610628575b505050811b01606655610482565b015160001960f88460031b161c1916905538808061061a565b8385015186558d97909501949384019301610609565b606661069c9352847f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943549181880160051c83019388106106a4575b0160051c019061274a565b8c8b38610458565b92508192610691565b634e487b7160e01b8c526041865260248cfd5b015190503880610422565b91908d94508e601f19851690606585527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c794905b828210610736575050841161071d575b505050811b01606555610437565b015160001960f88460031b161c1916905538808061070f565b91929395968291958786015181550195019301908f918f96959493926106ff565b61079c9160658552887f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c79181880160051c83019388106106a4570160051c019061274a565b388e61040e565b634e487b7160e01b8d526041875260248dfd5b61ffff19166101011789553861038e565b865162461bcd60e51b8152808301879052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156103755750600181861614610375565b5060018186161061036e565b8380fd5b50503461027157602036600319011261027157610334906103216001600160a01b03610871611f80565b1661266c565b5082346103385760203660031901126103385781358152610192602052829020546001600160a01b03169081156108b557610334836103218461266c565b606490602084519162461bcd60e51b8352820152601d60248201527f5468697320757365726e616d6520646f6573206e6f742065786973742e0000006044820152fd5b83823461027157608036600319011261027157610913611f80565b61091b611f9b565b9060643567ffffffffffffffff8111610948576101df9361093e913691016120c5565b91604435916129f0565b8480fd5b509034610234578060031936011261023457610966611f80565b9060243591821515809303610948576001600160a01b0316923384146109d75750338452606a602052808420836000526020528060002060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b6020606492519162461bcd60e51b8352820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b50503461027157816003193601126102715751908152602090f35b5091903461027157606036600319011261027157610a50611f80565b92602480359367ffffffffffffffff91604435838111610234573660238201121561023457610a879036908381880135910161208e565b9060018060a01b03978860c9541633148015610f97575b8015610f59575b15610efa57881696878452610191602099818b5288862054908115908b8280610ecb575b8315610ea0575b50505015610e5e5760008a8152606760205260409020546001600160a01b031615610d6d575b8203610d13575b5050610b088761266c565b8651610b308a8281610b238183019687815193849201611f38565b8101038084520182612050565b519020865189810190610b4d8b828751610b238187858c01611f38565b51902003610b5f575b87878751908152f35b6000878152606760205260409020546001600160a01b031615610cbb5786835260978852858320948251948511610caa575050908291610b9f8554612632565b601f8111610c71575b508791601f8411600114610c0e5792610c03575b50508160011b916000199060031b1c19161790555b7ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7838251848152a13880808080610b56565b015190503880610bbc565b8581528881209350601f198516905b89828210610c5b575050908460019594939210610c42575b505050811b019055610bd1565b015160001960f88460031b161c19169055388080610c35565b6001859682939686015181550195019301610c1d565b610c9a90868452898420601f860160051c8101918b8710610ca0575b601f0160051c019061274a565b38610ba8565b9091508190610c8d565b634e487b7160e01b84526041905282fd5b84602e6084928a89519362461bcd60e51b85528401528201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152fd5b888552808a528785205480610d4f575b508185526101928a5287852080546001600160a01b0319168a1790558885528952868420553880610afd565b85526101928a5287852080546001600160a01b031916905538610d23565b948915610e1e5760008a815260676020526040902054839190610d9c906001600160a01b031615155b15612ae9565b60008b815260676020526040902054909690610dc2906001600160a01b03161515610d96565b8a60005260688c52896000206001815401905560678c52896000208b6001600160601b0360a01b8254161790558a8060007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a49050610af6565b6064888c86818d519362461bcd60e51b85528401528201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b885162461bcd60e51b81528089018c9052601f818601527f5468697320757365726e616d6520697320616c72656164792074616b656e2e006044820152606490fd5b1592509082610eb4575b5050388b81610ad0565b8389526101928e528b892054161490508a38610eaa565b9250508488526101928d528b818c8a205416818115918215610ef0575b505092610ac9565b1490508138610ee8565b865162461bcd60e51b81526020818801526034818401527f4f6e6c79207468652070726f66696c65206f776e6572206f7220636f6e74726160448201527331ba1037bbb732b91031b0b71039b2ba1034ba1760611b6064820152608490fd5b507f224b562a599bb6f57441f98a50de513dff0de3d9b620f342c27a4e4a898ce8e2845260fb60205286842033855260205260ff8785205416610aa5565b503389821614610a9e565b509034610234576020366003190112610234575190356001600160a01b0316815260209150f35b50503461027157816003193601126102715780519082606654610feb81612632565b808552916001918083169081156110865750600114611029575b50505061101782610334940383612050565b51918291602083526020830190611f5b565b9450606685527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943545b82861061106e575050506110178260206103349582010194611005565b80546020878701810191909152909501948101611051565b61033497508693506020925061101794915060ff191682840152151560051b82010194611005565b50346102345781600319360112610234578160209360ff926110ce611f9b565b9035825260fb86528282206001600160a01b039091168252855220549151911615158152f35b50503461027157816003193601126102715760c95490516001600160a01b039091168152602090f35b505034610271576020366003190112610271576020906001600160a01b03611143611f80565b169051908152f35b83346103385780600319360112610338576111646124cf565b60c980546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50829034610271576020366003190112610271576001600160a01b036111cc611f80565b169081156111e95760208480858581526068845220549051908152f35b608490602085519162461bcd60e51b8352820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152fd5b509134610338576020366003190112610338575061125e6020923561292d565b90516001600160a01b039091168152f35b505034610271578160031936011261027157602090517f224b562a599bb6f57441f98a50de513dff0de3d9b620f342c27a4e4a898ce8e28152f35b5034610234576020366003190112610234573582526101926020908152918190205490516001600160a01b039091168152f35b508234610338578060031936011261033857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036113375760208251600080516020612e8a8339815191528152f35b6020608492519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b509080600319360112610234576113b4611f80565b9060243567ffffffffffffffff8111610948576113d490369085016120c5565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692919061140e30851415612570565b61142b600080516020612e8a8339815191529482865416146125d1565b6114336124cf565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561146b57505050506101df9150612788565b8491929394168351946352d1902d60e01b865260209586818981865afa89918161160a575b506114ef57855162461bcd60e51b8152808901889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b96919294959396036115b5575090859161150884612788565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a28451158015906115ad575b611544575b505050505080f35b6115a2948291660819985a5b195960ca1b86519661156188612018565b602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c8389015287015281519101845af461159c612818565b91612848565b50388080838161153c565b506001611537565b845162461bcd60e51b8152908101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508781813d8311611636575b6116228183612050565b8101031261163257519038611490565b8980fd5b503d611618565b5091903461027157602090816003193601126102345760c9546001600160a01b038535818116969092339083161480156118cf575b8015611893575b15611834578686526101918086528487205487526101928652848720976001600160601b0360a01b98898154169055875285528584812055816116bb8461292d565b1615801561182c575b1561179d575084809683926116d88461292d565b848452606988528684208381541690551690818352606887528583206000198154019055838352606787528583209081541690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a46097835261174082852054612632565b61174957505050f35b83526097825282209061175c8254612632565b908161176757505050f35b8390601f831160011461177b575050505580f35b838252812092909161179890601f0160051c84016001850161274a565b555580f35b835162461bcd60e51b8152908101859052605b60248201527f54686973206120536f756c626f756e6420746f6b656e2e2049742063616e6e6f60448201527f74206265207472616e736665727265642e2049742063616e206f6e6c7920626560648201527f206275726e65642062792074686520746f6b656e206f776e65722e0000000000608482015260a490fd5b5060016116c4565b835162461bcd60e51b8152908101859052603360248201527f4f6e6c7920746865206f776e6572206f662074686520746f6b656e206f7220706044820152723937b334b6329031b0b710313ab9371034ba1760691b6064820152608490fd5b507f224b562a599bb6f57441f98a50de513dff0de3d9b620f342c27a4e4a898ce8e2865260fb8552838620338752855260ff8487205416611679565b50338714611672565b505034610271576101df906118ec36611fb1565b919251926118f984611fe6565b8584526129f0565b509034610234576020806003193601126108435761191d611f80565b916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811661195530821415612570565b611972600080516020612e8a8339815191529183835416146125d1565b61197a6124cf565b82519161198683611fe6565b8783527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119c25750505050506101df9150612788565b8592939495169084516352d1902d60e01b815286818981865afa899181611a9d575b50611a4357855162461bcd60e51b8152808901889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b96919294959396036115b55750908591611a5c84612788565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a2845115801590611a965761154457505050505080f35b5081611537565b9091508781813d8311611ac5575b611ab58183612050565b81010312611632575190386119e4565b503d611aab565b50829034610271578260031936011261027157611ae7611f9b565b90336001600160a01b03831603611b0357906101df9135612459565b608490602085519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b50346102345781600319360112610234573590611b79611f9b565b9082845260fb602052611b9160018286200154612143565b82845260fb60209081528185206001600160a01b039093168086529290528084205460ff1615611bbf578380f35b82845260fb6020528084208285526020528320600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8480a43880808380f35b5034610234576020366003190112610234578160209360019235815260fb85522001549051908152f35b8334610338576101df611c4636611fb1565b91611c59611c548433612a7b565b61298e565b612b8f565b5034610234578160031936011261023457611c77611f80565b6024359290916001600160a01b0391908280611c928761292d565b16941693808514611d8157803314908115611d62575b5015611cfa57508385526069602052842080546001600160a01b03191683179055611cd28361292d565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b6020608492519162461bcd60e51b8352820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152fd5b90508652606a60205281862033875260205260ff828720541638611ca8565b506020608492519162461bcd60e51b8352820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152fd5b509134610338576020366003190112610338575061125e60209235612950565b50503461027157816003193601126102715780519082606554611e1081612632565b808552916001918083169081156110865750600114611e3b5750505061101782610334940383612050565b9450606585527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c75b828610611e80575050506110178260206103349582010194611005565b80546020878701810191909152909501948101611e63565b92505034610234576020366003190112610234573563ffffffff60e01b81168091036102345760209250637965db0b60e01b8114908115611edb575b5015158152f35b632483248360e11b811491508115611ef5575b5038611ed4565b6380ac58cd60e01b811491508115611f27575b8115611f16575b5038611eee565b6301ffc9a760e01b14905038611f0f565b635b5e139f60e01b81149150611f08565b60005b838110611f4b5750506000910152565b8181015183820152602001611f3b565b90602091611f7481518092818552858086019101611f38565b601f01601f1916010190565b600435906001600160a01b0382168203611f9657565b600080fd5b602435906001600160a01b0382168203611f9657565b6060906003190112611f96576001600160a01b03906004358281168103611f9657916024359081168103611f96579060443590565b6020810190811067ffffffffffffffff82111761200257604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761200257604052565b6040810190811067ffffffffffffffff82111761200257604052565b90601f8019910116810190811067ffffffffffffffff82111761200257604052565b67ffffffffffffffff811161200257601f01601f191660200190565b92919261209a82612072565b916120a86040519384612050565b829481845281830111611f96578281602093846000960137010152565b9080601f83011215611f96578160206120e09335910161208e565b90565b156120ea57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60009080825260209060fb8252604092838120338252835260ff84822054161561216d5750505050565b3384519261217a84612018565b602a845284840190863683378451156124455760308253845192600193841015612431576078602187015360295b8481116123c75750612385578651926080840184811067ffffffffffffffff8211176123715788526042845286840194606036873784511561235d5760308653845182101561235d5790607860218601536041915b8183116122ef575050506122ad576122a993869361228d9361227e6048946122559a519a8b957f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008c8801525180926037880190611f38565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611f38565b01036028810187520185612050565b5192839262461bcd60e51b845260048401526024830190611f5b565b0390fd5b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612349576f181899199a1a9b1b9c1cb0b131b232b360811b901a61231f8588612761565b5360041c928015612335576000190191906121fd565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b634e487b7160e01b86526041600452602486fd5b60648688519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f8116601081101561241d576f181899199a1a9b1b9c1cb0b131b232b360811b901a6123f58389612761565b5360041c90801561240957600019016121a8565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b87526032600452602487fd5b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b84526032600452602484fd5b9060009180835260fb602052604083209160018060a01b03169182845260205260ff60408420541661248a57505050565b80835260fb602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b60c9546001600160a01b031633036124e357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60c980546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b1561257757565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b156125d857565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b90600182811c92168015612662575b602083101461264c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612641565b60008181526067602052604090205461268f906001600160a01b031615156128e1565b60009081526020906097825260408120916040518093839080546126b281612632565b8085529160019180831690811561272857506001146126eb575b5050506126db92500383612050565b6040516126e781611fe6565b5290565b86528486209492508591905b8183106127105750506126db93508201013880806126cc565b855488840185015294850194879450918301916126f7565b925050506126db94925060ff191682840152151560051b8201013880806126cc565b818110612755575050565b6000815560010161274a565b908151811015612772570160200190565b634e487b7160e01b600052603260045260246000fd5b803b156127bd57600080516020612e8a83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b3d15612843573d9061282982612072565b916128376040519384612050565b82523d6000602084013e565b606090565b919290156128aa575081511561285c575090565b3b156128655790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156128bd5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906122a9906024830190611f5b565b156128e857565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152606760205260409020546001600160a01b03166120e08115156128e1565b600081815260676020526040902054612973906001600160a01b031615156128e1565b6000908152606960205260409020546001600160a01b031690565b1561299557565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b90612a14939291612a04611c548433612a7b565b612a0f838383612b8f565b612d47565b15612a1b57565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b906001600160a01b038080612a8f8461292d565b16931691838314938415612ac2575b508315612aac575b50505090565b612ab891929350612950565b1614388080612aa6565b909350600052606a60205260406000208260005260205260ff604060002054169238612a9e565b15612af057565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b15612b3c57565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b90612bb791612b9d8461292d565b6001600160a01b0393918416928492909183168414612b35565b16918215612cf65781158015612cee575b15612c5d5781612be291612bdb8661292d565b1614612b35565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008481526069602052604081206001600160601b0360a01b9081815416905583825260686020526040822060001981540190558482526040822060018154019055858252606760205284604083209182541617905580a4565b60405162461bcd60e51b815260206004820152605b60248201527f54686973206120536f756c626f756e6420746f6b656e2e2049742063616e6e6f60448201527f74206265207472616e736665727265642e2049742063616e206f6e6c7920626560648201527f206275726e65642062792074686520746f6b656e206f776e65722e0000000000608482015260a490fd5b506000612bc8565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b919290803b15612e8057604051630a85bd0160e11b8082523360048301526001600160a01b03948516602483015260448201959095526080606482015291602091839182908190612d9c906084830190611f5b565b03916000968791165af190829082612e38575b5050612e2a57612dbd612818565b80519081612e255760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b909192506020813d8211612e78575b81612e5460209383612050565b810103126102715751906001600160e01b0319821682036103385750903880612daf565b3d9150612e47565b5050505060019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220c03e82c01a5544f240ea19e9a861b34bf60b85f6acdffb82d5afbb92d3de4e2d64736f6c63430008140033",
}

// ProfileFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use ProfileFactoryMetaData.ABI instead.
var ProfileFactoryABI = ProfileFactoryMetaData.ABI

// ProfileFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProfileFactoryMetaData.Bin instead.
var ProfileFactoryBin = ProfileFactoryMetaData.Bin

// DeployProfileFactory deploys a new Ethereum contract, binding an instance of ProfileFactory to it.
func DeployProfileFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ProfileFactory, error) {
	parsed, err := ProfileFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProfileFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ProfileFactory{ProfileFactoryCaller: ProfileFactoryCaller{contract: contract}, ProfileFactoryTransactor: ProfileFactoryTransactor{contract: contract}, ProfileFactoryFilterer: ProfileFactoryFilterer{contract: contract}}, nil
}

// ProfileFactory is an auto generated Go binding around an Ethereum contract.
type ProfileFactory struct {
	ProfileFactoryCaller     // Read-only binding to the contract
	ProfileFactoryTransactor // Write-only binding to the contract
	ProfileFactoryFilterer   // Log filterer for contract events
}

// ProfileFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProfileFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProfileFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProfileFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProfileFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProfileFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProfileFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProfileFactorySession struct {
	Contract     *ProfileFactory   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProfileFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProfileFactoryCallerSession struct {
	Contract *ProfileFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// ProfileFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProfileFactoryTransactorSession struct {
	Contract     *ProfileFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ProfileFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProfileFactoryRaw struct {
	Contract *ProfileFactory // Generic contract binding to access the raw methods on
}

// ProfileFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProfileFactoryCallerRaw struct {
	Contract *ProfileFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// ProfileFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProfileFactoryTransactorRaw struct {
	Contract *ProfileFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProfileFactory creates a new instance of ProfileFactory, bound to a specific deployed contract.
func NewProfileFactory(address common.Address, backend bind.ContractBackend) (*ProfileFactory, error) {
	contract, err := bindProfileFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ProfileFactory{ProfileFactoryCaller: ProfileFactoryCaller{contract: contract}, ProfileFactoryTransactor: ProfileFactoryTransactor{contract: contract}, ProfileFactoryFilterer: ProfileFactoryFilterer{contract: contract}}, nil
}

// NewProfileFactoryCaller creates a new read-only instance of ProfileFactory, bound to a specific deployed contract.
func NewProfileFactoryCaller(address common.Address, caller bind.ContractCaller) (*ProfileFactoryCaller, error) {
	contract, err := bindProfileFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProfileFactoryCaller{contract: contract}, nil
}

// NewProfileFactoryTransactor creates a new write-only instance of ProfileFactory, bound to a specific deployed contract.
func NewProfileFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*ProfileFactoryTransactor, error) {
	contract, err := bindProfileFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProfileFactoryTransactor{contract: contract}, nil
}

// NewProfileFactoryFilterer creates a new log filterer instance of ProfileFactory, bound to a specific deployed contract.
func NewProfileFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*ProfileFactoryFilterer, error) {
	contract, err := bindProfileFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProfileFactoryFilterer{contract: contract}, nil
}

// bindProfileFactory binds a generic wrapper to an already deployed contract.
func bindProfileFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ProfileFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProfileFactory *ProfileFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProfileFactory.Contract.ProfileFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProfileFactory *ProfileFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProfileFactory.Contract.ProfileFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProfileFactory *ProfileFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProfileFactory.Contract.ProfileFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProfileFactory *ProfileFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProfileFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProfileFactory *ProfileFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProfileFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProfileFactory *ProfileFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProfileFactory.Contract.contract.Transact(opts, method, params...)
}

// Get is a free data retrieval call binding the contract method 0xb464631b.
//
// Solidity: function get(address owner, uint256 salt) view returns(address)
func (_ProfileFactory *ProfileFactoryCaller) Get(opts *bind.CallOpts, owner common.Address, salt *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ProfileFactory.contract.Call(opts, &out, "get", owner, salt)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Get is a free data retrieval call binding the contract method 0xb464631b.
//
// Solidity: function get(address owner, uint256 salt) view returns(address)
func (_ProfileFactory *ProfileFactorySession) Get(owner common.Address, salt *big.Int) (common.Address, error) {
	return _ProfileFactory.Contract.Get(&_ProfileFactory.CallOpts, owner, salt)
}

// Get is a free data retrieval call binding the contract method 0xb464631b.
//
// Solidity: function get(address owner, uint256 salt) view returns(address)
func (_ProfileFactory *ProfileFactoryCallerSession) Get(owner common.Address, salt *big.Int) (common.Address, error) {
	return _ProfileFactory.Contract.Get(&_ProfileFactory.CallOpts, owner, salt)
}

// ProfileImplementation is a free data retrieval call binding the contract method 0x947aa29d.
//
// Solidity: function profileImplementation() view returns(address)
func (_ProfileFactory *ProfileFactoryCaller) ProfileImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ProfileFactory.contract.Call(opts, &out, "profileImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ProfileImplementation is a free data retrieval call binding the contract method 0x947aa29d.
//
// Solidity: function profileImplementation() view returns(address)
func (_ProfileFactory *ProfileFactorySession) ProfileImplementation() (common.Address, error) {
	return _ProfileFactory.Contract.ProfileImplementation(&_ProfileFactory.CallOpts)
}

// ProfileImplementation is a free data retrieval call binding the contract method 0x947aa29d.
//
// Solidity: function profileImplementation() view returns(address)
func (_ProfileFactory *ProfileFactoryCallerSession) ProfileImplementation() (common.Address, error) {
	return _ProfileFactory.Contract.ProfileImplementation(&_ProfileFactory.CallOpts)
}

// Create is a paid mutator transaction binding the contract method 0x0ecaea73.
//
// Solidity: function create(address owner, uint256 salt) returns(address profile)
func (_ProfileFactory *ProfileFactoryTransactor) Create(opts *bind.TransactOpts, owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _ProfileFactory.contract.Transact(opts, "create", owner, salt)
}

// Create is a paid mutator transaction binding the contract method 0x0ecaea73.
//
// Solidity: function create(address owner, uint256 salt) returns(address profile)
func (_ProfileFactory *ProfileFactorySession) Create(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _ProfileFactory.Contract.Create(&_ProfileFactory.TransactOpts, owner, salt)
}

// Create is a paid mutator transaction binding the contract method 0x0ecaea73.
//
// Solidity: function create(address owner, uint256 salt) returns(address profile)
func (_ProfileFactory *ProfileFactoryTransactorSession) Create(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _ProfileFactory.Contract.Create(&_ProfileFactory.TransactOpts, owner, salt)
}

// ProfileFactoryProfileCreatedIterator is returned from FilterProfileCreated and is used to iterate over the raw logs and unpacked data for ProfileCreated events raised by the ProfileFactory contract.
type ProfileFactoryProfileCreatedIterator struct {
	Event *ProfileFactoryProfileCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProfileFactoryProfileCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProfileFactoryProfileCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProfileFactoryProfileCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProfileFactoryProfileCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProfileFactoryProfileCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProfileFactoryProfileCreated represents a ProfileCreated event raised by the ProfileFactory contract.
type ProfileFactoryProfileCreated struct {
	Owner   common.Address
	Profile common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterProfileCreated is a free log retrieval operation binding the contract event 0x0e3805ab5ed81d70cc14ca89a9d933b5cb074fe2cd9a0c48c3c4a6f404304bbc.
//
// Solidity: event ProfileCreated(address indexed owner, address profile)
func (_ProfileFactory *ProfileFactoryFilterer) FilterProfileCreated(opts *bind.FilterOpts, owner []common.Address) (*ProfileFactoryProfileCreatedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _ProfileFactory.contract.FilterLogs(opts, "ProfileCreated", ownerRule)
	if err != nil {
		return nil, err
	}
	return &ProfileFactoryProfileCreatedIterator{contract: _ProfileFactory.contract, event: "ProfileCreated", logs: logs, sub: sub}, nil
}

// WatchProfileCreated is a free log subscription operation binding the contract event 0x0e3805ab5ed81d70cc14ca89a9d933b5cb074fe2cd9a0c48c3c4a6f404304bbc.
//
// Solidity: event ProfileCreated(address indexed owner, address profile)
func (_ProfileFactory *ProfileFactoryFilterer) WatchProfileCreated(opts *bind.WatchOpts, sink chan<- *ProfileFactoryProfileCreated, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _ProfileFactory.contract.WatchLogs(opts, "ProfileCreated", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProfileFactoryProfileCreated)
				if err := _ProfileFactory.contract.UnpackLog(event, "ProfileCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProfileCreated is a log parse operation binding the contract event 0x0e3805ab5ed81d70cc14ca89a9d933b5cb074fe2cd9a0c48c3c4a6f404304bbc.
//
// Solidity: event ProfileCreated(address indexed owner, address profile)
func (_ProfileFactory *ProfileFactoryFilterer) ParseProfileCreated(log types.Log) (*ProfileFactoryProfileCreated, error) {
	event := new(ProfileFactoryProfileCreated)
	if err := _ProfileFactory.contract.UnpackLog(event, "ProfileCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
