// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accfactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AccfactoryMetaData contains all meta data concerning the Accfactory contract.
var AccfactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"},{\"internalType\":\"contractITokenEntryPoint\",\"name\":\"_tokenEntryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contractAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contractAccount\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a060405234801561001057600080fd5b50604051612f19380380612f1983398101604081905261002f916100aa565b818160405161003d90610085565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610070573d6000803e3d6000fd5b506001600160a01b0316608052506100e49050565b61255f806109ba83390190565b6001600160a01b03811681146100a757600080fd5b50565b600080604083850312156100bd57600080fd5b82516100c881610092565b60208401519092506100d981610092565b809150509250929050565b6080516108ae61010c60003960008181604b0152818161012201526101ef01526108ae6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806311464fbe146100465780635fbfb9cf146100895780638cb84e181461009c575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61006d6100973660046102ca565b6100af565b61006d6100aa3660046102ca565b6101b0565b6000806100bc84846101b0565b6040519091506001600160a01b038216907f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa290600090a26001600160a01b0381163b801561010c575090506101aa565b6040516001600160a01b038616602482015284907f00000000000000000000000000000000000000000000000000000000000000009060440160408051601f198184030181529181526020820180516001600160e01b031663189acdbd60e31b17905251610179906102bd565b610184929190610326565b8190604051809103906000f59050801580156101a4573d6000803e3d6000fd5b50925050505b92915050565b60006102848260001b604051806020016101c9906102bd565b601f1982820381018352601f9091011660408190526001600160a01b03871660248201527f00000000000000000000000000000000000000000000000000000000000000009060440160408051601f19818403018152918152602080830180516001600160e01b031663189acdbd60e31b179052905161024b93929101610326565b60408051601f19818403018152908290526102699291602001610368565b6040516020818303038152906040528051906020012061028b565b9392505050565b60006102848383306000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6104e18061039883390190565b600080604083850312156102dd57600080fd5b82356001600160a01b03811681146102f457600080fd5b946020939093013593505050565b60005b8381101561031d578181015183820152602001610305565b50506000910152565b60018060a01b03831681526040602082015260008251806040840152610353816060850160208701610302565b601f01601f1916919091016060019392505050565b6000835161037a818460208801610302565b83519083019061038e818360208801610302565b0194935050505056fe60806040526040516104e13803806104e1833981016040819052610022916102de565b61002e82826000610035565b50506103fb565b61003e83610061565b60008251118061004b5750805b1561005c5761005a83836100a1565b505b505050565b61006a816100cd565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100c683836040518060600160405280602781526020016104ba60279139610180565b9392505050565b6001600160a01b0381163b61013f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080856001600160a01b03168560405161019d91906103ac565b600060405180830381855af49150503d80600081146101d8576040519150601f19603f3d011682016040523d82523d6000602084013e6101dd565b606091505b5090925090506101ef868383876101f9565b9695505050505050565b60608315610268578251600003610261576001600160a01b0385163b6102615760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610136565b5081610272565b610272838361027a565b949350505050565b81511561028a5781518083602001fd5b8060405162461bcd60e51b815260040161013691906103c8565b634e487b7160e01b600052604160045260246000fd5b60005b838110156102d55781810151838201526020016102bd565b50506000910152565b600080604083850312156102f157600080fd5b82516001600160a01b038116811461030857600080fd5b60208401519092506001600160401b038082111561032557600080fd5b818501915085601f83011261033957600080fd5b81518181111561034b5761034b6102a4565b604051601f8201601f19908116603f01168101908382118183101715610373576103736102a4565b8160405282815288602084870101111561038c57600080fd5b61039d8360208301602088016102ba565b80955050505050509250929050565b600082516103be8184602087016102ba565b9190910192915050565b60208152600082518060208401526103e78160408501602087016102ba565b601f01601f19169190910160400192915050565b60b1806104096000396000f3fe608060405236601057600e6013565b005b600e5b601f601b6021565b6058565b565b600060537f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156076573d6000f35b3d6000fdfea264697066735822122004eafc12009ddd1bac09a0fbcdbbc0e38fdd09caf7f585983e4d324fd8f99a7364736f6c63430008140033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122049a046b703f3c698752c23f8711bd41ce3da921af827542bae962a16c6e481e464736f6c6343000814003360e0604052306080523480156200001557600080fd5b506040516200255f3803806200255f833981016040819052620000389162000137565b6001600160a01b0380831660a052811660c052620000556200005d565b505062000176565b600054610100900460ff1615620000ca5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146200011c576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200013457600080fd5b50565b600080604083850312156200014b57600080fd5b825162000158816200011e565b60208401519092506200016b816200011e565b809150509250929050565b60805160a05160c051612365620001fa600039600081816103970152611321015260008181610344015281816108010152818161088901528181610b2501528181610cd70152818161115b015281816112da015261150b015260008181610570015281816105b9015281816109120152818161095201526109e501526123656000f3fe6080604052600436106101435760003560e01c8063715018a6116100b6578063bc197c811161006f578063bc197c81146103bb578063c399ec88146103ea578063c4d66de8146103ff578063d087d2881461041f578063f23a6e6114610434578063f2fde38b1461046157600080fd5b8063715018a6146102ce5780638d4251f0146102e35780638da5cb5b14610303578063b0d691fe14610335578063b61d27f614610368578063bb5032061461038857600080fd5b80633a871cdd116101085780633a871cdd1461023057806347e1da2a1461025e5780634a58db191461027e5780634d44560d146102865780634f1ef286146102a657806352d1902d146102b957600080fd5b806223de291461014f57806301ffc9a714610176578063150b7a02146101ab5780631626ba7e146101f05780633659cfe61461021057600080fd5b3661014a57005b600080fd5b34801561015b57600080fd5b5061017461016a366004611b04565b5050505050505050565b005b34801561018257600080fd5b50610196610191366004611bb4565b610481565b60405190151581526020015b60405180910390f35b3480156101b757600080fd5b506101d76101c6366004611bde565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016101a2565b3480156101fc57600080fd5b506101d761020b366004611c50565b6104d3565b34801561021c57600080fd5b5061017461022b366004611c9b565b610566565b34801561023c57600080fd5b5061025061024b366004611cd1565b61064e565b6040519081526020016101a2565b34801561026a57600080fd5b50610174610279366004611d62565b61066d565b6101746107ff565b34801561029257600080fd5b506101746102a1366004611dfb565b61087f565b6101746102b4366004611e3d565b610908565b3480156102c557600080fd5b506102506109d8565b3480156102da57600080fd5b50610174610a8b565b3480156102ef57600080fd5b506101966102fe366004611f00565b610a9f565b34801561030f57600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101a2565b34801561034157600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061031d565b34801561037457600080fd5b50610174610383366004611f44565b610ab6565b34801561039457600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061031d565b3480156103c757600080fd5b506101d76103d6366004611f9f565b63bc197c8160e01b98975050505050505050565b3480156103f657600080fd5b50610250610b05565b34801561040b57600080fd5b5061017461041a366004611c9b565b610b96565b34801561042b57600080fd5b50610250610cb0565b34801561044057600080fd5b506101d761044f36600461203c565b63f23a6e6160e01b9695505050505050565b34801561046d57600080fd5b5061017461047c366004611c9b565b610d06565b60006001600160e01b03198216630a85bd0160e11b14806104b257506001600160e01b03198216630271189760e51b145b806104cd57506001600160e01b031982166301ffc9a760e01b145b92915050565b6000806105168585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d7c92505050565b905061052a6033546001600160a01b031690565b6001600160a01b0316816001600160a01b0316036105525750630b135d3f60e11b905061055f565b506001600160e01b031990505b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105b75760405162461bcd60e51b81526004016105ae906120a5565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106006000805160206122c9833981519152546001600160a01b031690565b6001600160a01b0316146106265760405162461bcd60e51b81526004016105ae906120f1565b61062f81610fd8565b6040805160008082526020820190925261064b91839190610fe0565b50565b6000610658611150565b61066284846111c8565b905061055f82611282565b6106756112cf565b848114801561068b575082158061068b57508281145b6106cd5760405162461bcd60e51b815260206004820152601360248201527277726f6e67206172726179206c656e6774687360681b60448201526064016105ae565b60008390036107835760005b8581101561077d5761076b8787838181106106f6576106f661213d565b905060200201602081019061070b9190611c9b565b600085858581811061071f5761071f61213d565b90506020028101906107319190612153565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506113ab92505050565b80610775816121af565b9150506106d9565b506107f7565b60005b858110156107f5576107e38787838181106107a3576107a361213d565b90506020020160208101906107b89190611c9b565b8686848181106107ca576107ca61213d565b9050602002013585858581811061071f5761071f61213d565b806107ed816121af565b915050610786565b505b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000060405163b760faf960e01b81523060048201526001600160a01b03919091169063b760faf99034906024016000604051808303818588803b15801561086457600080fd5b505af1158015610878573d6000803e3d6000fd5b5050505050565b61088761141b565b7f000000000000000000000000000000000000000000000000000000000000000060405163040b850f60e31b81526001600160a01b03848116600483015260248201849052919091169063205c287890604401600060405180830381600087803b1580156108f457600080fd5b505af11580156107f7573d6000803e3d6000fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109505760405162461bcd60e51b81526004016105ae906120a5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109996000805160206122c9833981519152546001600160a01b031690565b6001600160a01b0316146109bf5760405162461bcd60e51b81526004016105ae906120f1565b6109c882610fd8565b6109d482826001610fe0565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a785760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105ae565b506000805160206122c983398151915290565b610a9361141b565b610a9d6000611475565b565b60006001610aad84846111c8565b14159392505050565b610abe6112cf565b610aff848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506113ab92505050565b50505050565b6040516370a0823160e01b81523060048201526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b602060405180830381865afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9191906121c8565b905090565b600054610100900460ff1615808015610bb65750600054600160ff909116105b80610bd05750303b158015610bd0575060005460ff166001145b610c335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105ae565b6000805460ff191660011790558015610c56576000805461ff0019166101001790555b610c5e6114c7565b610c67826114f6565b80156109d4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b604051631aab3f0d60e11b8152306004820152600060248201819052906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906335567e1a90604401610b50565b610d0e61141b565b6001600160a01b038116610d735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ae565b61064b81611475565b60008151604114610de35760405162461bcd60e51b815260206004820152603a602482015260008051602061231083398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e67746800000000000060648201526084016105ae565b600082604081518110610df857610df861213d565b016020015160f81c90506000610e0e8482611562565b90506000610e1d856020611562565b90506fa2a8918ca85bafe22016d0b997e4df60600160ff1b03811115610e995760405162461bcd60e51b815260206004820152603d602482015260008051602061231083398151915260448201527f3a20696e76616c6964207369676e6174757265202773272076616c756500000060648201526084016105ae565b8260ff16601b14158015610eb157508260ff16601c14155b15610f125760405162461bcd60e51b815260206004820152603d602482015260008051602061231083398151915260448201527f3a20696e76616c6964207369676e6174757265202776272076616c756500000060648201526084016105ae565b60408051600081526020810180835288905260ff851691810191909152606081018390526080810182905260019060a0016020604051602081039080840390855afa158015610f65573d6000803e3d6000fd5b5050604051601f1901519450506001600160a01b038416610fcf5760405162461bcd60e51b8152602060048201526030602482015260008051602061231083398151915260448201526f1d1024a72b20a624a22fa9a4a3a722a960811b60648201526084016105ae565b50505092915050565b61064b61141b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561101857611013836115c8565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611072575060408051601f3d908101601f1916820190925261106f918101906121c8565b60015b6110d55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105ae565b6000805160206122c983398151915281146111445760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105ae565b50611013838383611664565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a9d5760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016105ae565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c829052603c8120611245611208610140860186612153565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085939250506116899050565b6001600160a01b03166112606033546001600160a01b031690565b6001600160a01b0316146112785760019150506104cd565b5060009392505050565b801561064b57604051600090339060001990849084818181858888f193505050503d8060008114610878576040519150601f19603f3d011682016040523d82523d6000602084013e610878565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061131057506033546001600160a01b031633145b806113435750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b610a9d5760405162461bcd60e51b815260206004820152603360248201527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e74604482015272081bdc88151bdad95b915b9d1c9e541bda5b9d606a1b60648201526084016105ae565b600080846001600160a01b031684846040516113c79190612205565b60006040518083038185875af1925050503d8060008114611404576040519150601f19603f3d011682016040523d82523d6000602084013e611409565b606091505b50915091508161087857805160208201fd5b6033546001600160a01b03163314610a9d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ae565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166114ee5760405162461bcd60e51b81526004016105ae90612221565b610a9d6116ad565b6114ff81610d06565b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f526ffefac8167421b9048ae3377810715d834479565b0182ea4155f0efa4c38060405160405180910390a350565b600061156f82602061226c565b835110156115bf5760405162461bcd60e51b815260206004820181905260248201527f72656164427974657333323a20696e76616c69642064617461206c656e67746860448201526064016105ae565b50016020015190565b6001600160a01b0381163b6116355760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105ae565b6000805160206122c983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61166d836116dd565b60008251118061167a5750805b1561101357610aff838361171d565b60008060006116988585611742565b915091506116a581611787565b509392505050565b600054610100900460ff166116d45760405162461bcd60e51b81526004016105ae90612221565b610a9d33611475565b6116e6816115c8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061055f83836040518060600160405280602781526020016122e9602791396118d1565b60008082516041036117785760208301516040840151606085015160001a61176c87828585611949565b94509450505050611780565b506000905060025b9250929050565b600081600481111561179b5761179b61227f565b036117a35750565b60018160048111156117b7576117b761227f565b036118045760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105ae565b60028160048111156118185761181861227f565b036118655760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105ae565b60038160048111156118795761187961227f565b0361064b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105ae565b6060600080856001600160a01b0316856040516118ee9190612205565b600060405180830381855af49150503d8060008114611929576040519150601f19603f3d011682016040523d82523d6000602084013e61192e565b606091505b509150915061193f86838387611a03565b9695505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561197657506000905060036119fa565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156119ca573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166119f3576000600192509250506119fa565b9150600090505b94509492505050565b60608315611a72578251600003611a6b576001600160a01b0385163b611a6b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ae565b5081611a7c565b611a7c8383611a84565b949350505050565b815115611a945781518083602001fd5b8060405162461bcd60e51b81526004016105ae9190612295565b6001600160a01b038116811461064b57600080fd5b60008083601f840112611ad557600080fd5b5081356001600160401b03811115611aec57600080fd5b60208301915083602082850101111561178057600080fd5b60008060008060008060008060c0898b031215611b2057600080fd5b8835611b2b81611aae565b97506020890135611b3b81611aae565b96506040890135611b4b81611aae565b95506060890135945060808901356001600160401b0380821115611b6e57600080fd5b611b7a8c838d01611ac3565b909650945060a08b0135915080821115611b9357600080fd5b50611ba08b828c01611ac3565b999c989b5096995094979396929594505050565b600060208284031215611bc657600080fd5b81356001600160e01b03198116811461055f57600080fd5b600080600080600060808688031215611bf657600080fd5b8535611c0181611aae565b94506020860135611c1181611aae565b93506040860135925060608601356001600160401b03811115611c3357600080fd5b611c3f88828901611ac3565b969995985093965092949392505050565b600080600060408486031215611c6557600080fd5b8335925060208401356001600160401b03811115611c8257600080fd5b611c8e86828701611ac3565b9497909650939450505050565b600060208284031215611cad57600080fd5b813561055f81611aae565b60006101608284031215611ccb57600080fd5b50919050565b600080600060608486031215611ce657600080fd5b83356001600160401b03811115611cfc57600080fd5b611d0886828701611cb8565b9660208601359650604090950135949350505050565b60008083601f840112611d3057600080fd5b5081356001600160401b03811115611d4757600080fd5b6020830191508360208260051b850101111561178057600080fd5b60008060008060008060608789031215611d7b57600080fd5b86356001600160401b0380821115611d9257600080fd5b611d9e8a838b01611d1e565b90985096506020890135915080821115611db757600080fd5b611dc38a838b01611d1e565b90965094506040890135915080821115611ddc57600080fd5b50611de989828a01611d1e565b979a9699509497509295939492505050565b60008060408385031215611e0e57600080fd5b8235611e1981611aae565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611e5057600080fd5b8235611e5b81611aae565b915060208301356001600160401b0380821115611e7757600080fd5b818501915085601f830112611e8b57600080fd5b813581811115611e9d57611e9d611e27565b604051601f8201601f19908116603f01168101908382118183101715611ec557611ec5611e27565b81604052828152886020848701011115611ede57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215611f1357600080fd5b82356001600160401b03811115611f2957600080fd5b611f3585828601611cb8565b95602094909401359450505050565b60008060008060608587031215611f5a57600080fd5b8435611f6581611aae565b93506020850135925060408501356001600160401b03811115611f8757600080fd5b611f9387828801611ac3565b95989497509550505050565b60008060008060008060008060a0898b031215611fbb57600080fd5b8835611fc681611aae565b97506020890135611fd681611aae565b965060408901356001600160401b0380821115611ff257600080fd5b611ffe8c838d01611d1e565b909850965060608b013591508082111561201757600080fd5b6120238c838d01611d1e565b909650945060808b0135915080821115611b9357600080fd5b60008060008060008060a0878903121561205557600080fd5b863561206081611aae565b9550602087013561207081611aae565b9450604087013593506060870135925060808701356001600160401b0381111561209957600080fd5b611de989828a01611ac3565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261216a57600080fd5b8301803591506001600160401b0382111561218457600080fd5b60200191503681900382131561178057600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016121c1576121c1612199565b5060010190565b6000602082840312156121da57600080fd5b5051919050565b60005b838110156121fc5781810151838201526020016121e4565b50506000910152565b600082516122178184602087016121e1565b9190910192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b808201808211156104cd576104cd612199565b634e487b7160e01b600052602160045260246000fd5b60208152600082518060208401526122b48160408501602087016121e1565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65645369676e617475726556616c696461746f72237265636f7665725369676e6572a2646970667358221220ac27cb30f1e9c609b5c79d73260c1b41289cd7a9828745ce81e67fb869204e6864736f6c63430008140033",
}

// AccfactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use AccfactoryMetaData.ABI instead.
var AccfactoryABI = AccfactoryMetaData.ABI

// AccfactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccfactoryMetaData.Bin instead.
var AccfactoryBin = AccfactoryMetaData.Bin

// DeployAccfactory deploys a new Ethereum contract, binding an instance of Accfactory to it.
func DeployAccfactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address, _tokenEntryPoint common.Address) (common.Address, *types.Transaction, *Accfactory, error) {
	parsed, err := AccfactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccfactoryBin), backend, _entryPoint, _tokenEntryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accfactory{AccfactoryCaller: AccfactoryCaller{contract: contract}, AccfactoryTransactor: AccfactoryTransactor{contract: contract}, AccfactoryFilterer: AccfactoryFilterer{contract: contract}}, nil
}

// Accfactory is an auto generated Go binding around an Ethereum contract.
type Accfactory struct {
	AccfactoryCaller     // Read-only binding to the contract
	AccfactoryTransactor // Write-only binding to the contract
	AccfactoryFilterer   // Log filterer for contract events
}

// AccfactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccfactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccfactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccfactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccfactorySession struct {
	Contract     *Accfactory       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccfactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccfactoryCallerSession struct {
	Contract *AccfactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AccfactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccfactoryTransactorSession struct {
	Contract     *AccfactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccfactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccfactoryRaw struct {
	Contract *Accfactory // Generic contract binding to access the raw methods on
}

// AccfactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccfactoryCallerRaw struct {
	Contract *AccfactoryCaller // Generic read-only contract binding to access the raw methods on
}

// AccfactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccfactoryTransactorRaw struct {
	Contract *AccfactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccfactory creates a new instance of Accfactory, bound to a specific deployed contract.
func NewAccfactory(address common.Address, backend bind.ContractBackend) (*Accfactory, error) {
	contract, err := bindAccfactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accfactory{AccfactoryCaller: AccfactoryCaller{contract: contract}, AccfactoryTransactor: AccfactoryTransactor{contract: contract}, AccfactoryFilterer: AccfactoryFilterer{contract: contract}}, nil
}

// NewAccfactoryCaller creates a new read-only instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryCaller(address common.Address, caller bind.ContractCaller) (*AccfactoryCaller, error) {
	contract, err := bindAccfactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccfactoryCaller{contract: contract}, nil
}

// NewAccfactoryTransactor creates a new write-only instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*AccfactoryTransactor, error) {
	contract, err := bindAccfactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccfactoryTransactor{contract: contract}, nil
}

// NewAccfactoryFilterer creates a new log filterer instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*AccfactoryFilterer, error) {
	contract, err := bindAccfactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccfactoryFilterer{contract: contract}, nil
}

// bindAccfactory binds a generic wrapper to an already deployed contract.
func bindAccfactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AccfactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accfactory *AccfactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accfactory.Contract.AccfactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accfactory *AccfactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accfactory.Contract.AccfactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accfactory *AccfactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accfactory.Contract.AccfactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accfactory *AccfactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accfactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accfactory *AccfactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accfactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accfactory *AccfactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accfactory.Contract.contract.Transact(opts, method, params...)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Accfactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactorySession) AccountImplementation() (common.Address, error) {
	return _Accfactory.Contract.AccountImplementation(&_Accfactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _Accfactory.Contract.AccountImplementation(&_Accfactory.CallOpts)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactoryCaller) GetAddress(opts *bind.CallOpts, owner common.Address, salt *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Accfactory.contract.Call(opts, &out, "getAddress", owner, salt)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactorySession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _Accfactory.Contract.GetAddress(&_Accfactory.CallOpts, owner, salt)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactoryCallerSession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _Accfactory.Contract.GetAddress(&_Accfactory.CallOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactoryTransactor) CreateAccount(opts *bind.TransactOpts, owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.contract.Transact(opts, "createAccount", owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactorySession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.Contract.CreateAccount(&_Accfactory.TransactOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactoryTransactorSession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.Contract.CreateAccount(&_Accfactory.TransactOpts, owner, salt)
}

// AccfactoryAccountCreatedIterator is returned from FilterAccountCreated and is used to iterate over the raw logs and unpacked data for AccountCreated events raised by the Accfactory contract.
type AccfactoryAccountCreatedIterator struct {
	Event *AccfactoryAccountCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccfactoryAccountCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccfactoryAccountCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccfactoryAccountCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccfactoryAccountCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccfactoryAccountCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccfactoryAccountCreated represents a AccountCreated event raised by the Accfactory contract.
type AccfactoryAccountCreated struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAccountCreated is a free log retrieval operation binding the contract event 0x805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa2.
//
// Solidity: event AccountCreated(address indexed account)
func (_Accfactory *AccfactoryFilterer) FilterAccountCreated(opts *bind.FilterOpts, account []common.Address) (*AccfactoryAccountCreatedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Accfactory.contract.FilterLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return &AccfactoryAccountCreatedIterator{contract: _Accfactory.contract, event: "AccountCreated", logs: logs, sub: sub}, nil
}

// WatchAccountCreated is a free log subscription operation binding the contract event 0x805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa2.
//
// Solidity: event AccountCreated(address indexed account)
func (_Accfactory *AccfactoryFilterer) WatchAccountCreated(opts *bind.WatchOpts, sink chan<- *AccfactoryAccountCreated, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Accfactory.contract.WatchLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccfactoryAccountCreated)
				if err := _Accfactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountCreated is a log parse operation binding the contract event 0x805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa2.
//
// Solidity: event AccountCreated(address indexed account)
func (_Accfactory *AccfactoryFilterer) ParseAccountCreated(log types.Log) (*AccfactoryAccountCreated, error) {
	event := new(AccfactoryAccountCreated)
	if err := _Accfactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
