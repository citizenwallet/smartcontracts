// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package faucetFactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// FaucetFactoryMetaData contains all meta data concerning the FaucetFactory contract.
var FaucetFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"redeemInterval\",\"type\":\"uint48\"}],\"name\":\"RedeemCodeFaucetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"redeemInterval\",\"type\":\"uint48\"}],\"name\":\"SimpleFaucetCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_redeemInterval\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"_codeCreator\",\"type\":\"address\"}],\"name\":\"createRedeemCodeFaucet\",\"outputs\":[{\"internalType\":\"contractRedeemCodeFaucet\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_redeemInterval\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"_redeemAdmin\",\"type\":\"address\"}],\"name\":\"createSimpleFaucet\",\"outputs\":[{\"internalType\":\"contractSimpleFaucet\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_redeemInterval\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"_codeCreator\",\"type\":\"address\"}],\"name\":\"getRedeemCodeFaucetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_redeemInterval\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"_redeemAdmin\",\"type\":\"address\"}],\"name\":\"getSimpleFaucetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemCodeFaucetImplementation\",\"outputs\":[{\"internalType\":\"contractRedeemCodeFaucet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simpleFaucetImplementation\",\"outputs\":[{\"internalType\":\"contractSimpleFaucet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c080604052346100e457611d31818101916001600160401b0391828411828510176100ce57612ab0823980600093039083f080156100c35760805260405190611e16808301918211838310176100af57908291610c9a8339039082f09081156100a3575060a052604051610bb090816100ea8239608051818181610120015281816103e101526104e4015260a05181818160b80152818161063d015261071d0152f35b604051903d90823e3d90fd5b634e487b7160e01b84526041600452602484fd5b6040513d84823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe60406080815260043610156200001457600080fd5b600090813560e01c806309e5223e14620001725780634a40c132146200014f5780636057b63d146200010a5780636589575814620000e757806376c4041714620000a25763c8a66cb0146200006857600080fd5b346200009e576020906200008d620000803662000198565b94939093929192620002ef565b90516001600160a01b039091168152f35b5080fd5b50346200009e57816003193601126200009e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346200009e576020906200008d6200010036620001fb565b939290926200066e565b50346200009e57816003193601126200009e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346200009e576020906200008d6200016836620001fb565b939290926200055c565b50346200009e576020906200008d6200018b3662000198565b949390939291926200042f565b60c0906003190112620001f6576001600160a01b03906004358281168103620001f65791602435916044358281168103620001f657916064359160843565ffffffffffff81168103620001f6579160a4359081168103620001f65790565b600080fd5b60a0906003190112620001f6576001600160a01b036004358181168103620001f65791602435916044358181168103620001f6579160643565ffffffffffff81168103620001f657916084359081168103620001f65790565b90601f8019910116810190811067ffffffffffffffff8211176200027757604052565b634e487b7160e01b600052604160045260246000fd5b60005b838110620002a15750506000910152565b818101518382015260200162000290565b909160609260018060a01b0316825260406020830152620002e381518092816040860152602086860191016200028d565b601f01601f1916010190565b9192949093620003048282888789886200042f565b9560018060a01b039687811690817ffe6b2ca53152946ea448fc2f0d59bb5c77fd6a42dfe98fecb30750d2baaf8a3160606040518c8b16815286602082015265ffffffffffff88166040820152a23b6200042457506040516377202ba160e01b60208201526001600160a01b0394851660248201529484166044860152606485015265ffffffffffff1660848401521660a4820152620003b28160c481015b03601f19810183528262000254565b604051906104168083019183831067ffffffffffffffff841117620002775783926200040892620007658539867f00000000000000000000000000000000000000000000000000000000000000001690620002b2565b03906000f5801562000418571690565b6040513d6000823e3d90fd5b965050505050505090565b926200054f91946200054293620005599795620004b561041697604051946020966200045e888c018862000254565b8a87528787019a620007658c396040516377202ba160e01b898201526001600160a01b0395861660248201529585166044870152606486015265ffffffffffff16608485015290911660a4830152819060c4820190565b03620004ca601f199182810184528362000254565b6200051860405191826200050b8782019560018060a01b037f00000000000000000000000000000000000000000000000000000000000000001687620002b2565b0390810183528262000254565b60405195869362000532868601998a92519283916200028d565b840191518093868401906200028d565b0103808452018262000254565b5190209062000744565b90565b9092936200056e81868587866200066e565b9460018060a01b039586811690817fb93973492142c237facfddbc7e4e65070b940426b6a350b2c3cc492bf197073460606040518b8a1681526000602082015265ffffffffffff87166040820152a23b6200066457506040516302c7bf3d60e31b60208201526001600160a01b039384166024820152938316604485015265ffffffffffff1660648401521660848201526200060e8160a48101620003a3565b604051906104168083019183831067ffffffffffffffff841117620002775783926200040892620007658539867f00000000000000000000000000000000000000000000000000000000000000001690620002b2565b9550505050505090565b9162000542919362000559956200054f9261041695620006ee604051936020956200069c878b018762000254565b89865286860199620007658b396040516302c7bf3d60e31b888201526001600160a01b039485166024820152948416604486015265ffffffffffff1660648501529091166084830152819060a4820190565b0362000703601f199182810184528362000254565b6200051860405191826200050b8782019560018060a01b037f00000000000000000000000000000000000000000000000000000000000000001687620002b2565b605591600b9160405191604083015260208201523081520160ff8153209056fe604060808152610416908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160d190816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe608060405236156054577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f3fea2646970667358221220044b95600c5a8b16f58ad7053fc82847c6e00cbcad98e443169bf78d6395632364736f6c63430008140033a2646970667358221220c7c0a33d22561cbffa5027bcdfc8c5bff0977dc131872ec465d354b43ef9935464736f6c6343000814003360a080604052346100315730608052611ddf90816100378239608051818181610580015281816106a80152610aaa0152f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a7146110ed57508163163df9e814610e4d578163248a9ca314610e225781632f2ff15d14610d0a57816336568abe14610c785781633659cfe614610a82578382633ccfd60b14610960575081633d8b9e071461092f5781634f1ef2861461062d57816352d1902d1461056a578163715018a61461050a5781638da5cb5b146104e157816391d148541461049a578163931409081461047157816393c0a4aa14610447578163a217fddf1461042c578163d547741f146103f0578163db006a75146103d3578163e939509614610240578163ed05582b14610210578163f2fde38b1461017a57508063f8ec16de146101505763fc0c546a1461012457600080fd5b3461014c578160031936011261014c5761012d5490516001600160a01b039091168152602090f35b5080fd5b503461014c578160031936011261014c5760209065ffffffffffff61012d5460a01c169051908152f35b90503461020c57602036600319011261020c57610195611140565b9161019e6119c0565b6001600160a01b038316156101ba57836101b784611a18565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461014c578060031936011261014c57602090610239610230611140565b60243590611212565b9051908152f35b9190503461020c57606036600319011261020c576024358235610261611171565b9361026a61158d565b821561036a5765ffffffffffff8095169480421686111561030c5782875261013160205284872054166102be5750845261012f6020528184205561013060205282209065ffffffffffff1982541617905580f35b608490602085519162461bcd60e51b8352820152602260248201527f52656465656d436f64654661756365743a20616c72656164792072656465656d604482015261195960f21b6064820152fd5b845162461bcd60e51b8152602081840152603260248201527f52656465656d436f64654661756365743a2076616c6964556e74696c206d75736044820152717420626520696e207468652066757475726560701b6064820152608490fd5b608490602085519162461bcd60e51b8352820152603c60248201527f52656465656d436f64654661756365743a2072656465656d61626c65416d6f7560448201527f6e74206d7573742062652067726561746572207468616e207a65726f000000006064820152fd5b83903461014c57602036600319011261014c576101b790356112b1565b9190503461020c578060031936011261020c576101b79135610427600161041561115b565b93838752609760205286200154611791565b6118ea565b50503461014c578160031936011261014c5751908152602090f35b50503461014c578160031936011261014c5761012e5490516001600160a01b039091168152602090f35b50503461014c578160031936011261014c5760209051600080516020611d6a8339815191528152f35b90503461020c578160031936011261020c578160209360ff926104bb61115b565b90358252609786528282206001600160a01b039091168252855220549151911615158152f35b50503461014c578160031936011261014c5760335490516001600160a01b039091168152602090f35b83346105675780600319360112610567576105236119c0565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b90508234610567578060031936011261056757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036105c55760208251600080516020611d8a8339815191528152f35b6020608492519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b9180915060031936011261020c57610643611140565b906024359067ffffffffffffffff821161092b573660238301121561092b578184013561066f816111f6565b61067b835191826111d4565b8181528660209485830193366024828401011161020c578060248893018637830101526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116906106d630831415611a61565b6106f3600080516020611d8a833981519152928284541614611ac2565b6106fb6119c0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610735575050505050506101b79150611c48565b869293949596169085516352d1902d60e01b815287818a81865afa8a91816108f8575b506107b757865162461bcd60e51b8152808a01899052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9791929396959497036108a357506107ce82611c48565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8780a28584511580159061089b575b61080c575b50505050505080f35b806108859684519661081d88611186565b602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b868901525190845af4913d15610891573d61087761086e826111f6565b925192836111d4565b81528681943d92013e611cd8565b50388080808085610803565b5060609250611cd8565b5060016107fe565b835162461bcd60e51b8152908101859052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508881813d8311610924575b61091081836111d4565b8101031261092057519038610758565b8a80fd5b503d610906565b8480fd5b90503461020c57602036600319011261020c578160209365ffffffffffff9235815261013185522054169051908152f35b9150913461014c578160031936011261014c5761097b61158d565b61012d5461012e5482516370a0823160e01b8152308682015260209590926001600160a01b039081169216908684602481865afa938415610a78579087949392918794610a3f575b50855163a9059cbb60e01b81526001600160a01b03909216908201908152602081019390935294859283919082906040015b03925af1908115610a365750610a09578280f35b81610a2892903d10610a2f575b610a2081836111d4565b810190611299565b5038808280f35b503d610a16565b513d85823e3d90fd5b8581969295503d8311610a71575b610a5781836111d4565b81010312610a6d579251869390926109f56109c3565b8580fd5b503d610a4d565b85513d88823e3d90fd5b9190503461020c57602080600319360112610c7457610a9f611140565b916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116610ad730821415611a61565b610af4600080516020611d8a833981519152918383541614611ac2565b610afc6119c0565b8251908482019282841067ffffffffffffffff851117610c61578385528883527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b56575050505050506101b79150611c48565b869293949596169085516352d1902d60e01b815287818a81865afa8a9181610c32575b50610bd857865162461bcd60e51b8152808a01899052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9791929396959497036108a35750610bef82611c48565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8780a285845115801590610c2b5761080c5750505050505080f35b50806107fe565b9091508881813d8311610c5a575b610c4a81836111d4565b8101031261092057519038610b79565b503d610c40565b634e487b7160e01b895260418852602489fd5b8380fd5b8391503461014c578260031936011261014c57610c9361115b565b90336001600160a01b03831603610caf57906101b791356118ea565b608490602085519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b90503461020c578160031936011261020c57803591610d2761115b565b9183855260209060978252610d4160018488200154611791565b600080516020611d6a8339815191528514610dcc5750838552609781528185206001600160a01b039093168086529281528185205460ff1615610d82578480f35b8385526097815281852083865290528320805460ff1916600117905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8480a4388080808480f35b915162461bcd60e51b815291820152602c60248201527f416363657373436f6e74726f6c3a2063616e6e6f74206772616e7420636f646560448201526b43726561746f7220726f6c6560a01b6064820152608490fd5b90503461020c57602036600319011261020c5781602093600192358152609785522001549051908152f35b90503461020c57608036600319011261020c57610e68611140565b6024356001600160a01b0381811693909291849003610a6d57610e89611171565b926064358181168091036110e95787549060ff96878360081c1615968780986110dd575b80156110c7575b1561106d5760ff198481166001178c55938861105c575b50610ee4898c5460081c16610edf81611960565b611960565b610eed33611a18565b610efc898c5460081c16611960565b61012d80546001600160d01b03191690921760a09190911b65ffffffffffff60a01b1617905561012e80546001600160a01b03191682179055600080516020611d6a833981519152808a5260976020908152898b20838c528152898b205490989193911615611013575b505050610f716119c0565b821615610fc15750610f8290611a18565b610f8a578280f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a138808280f35b845162461bcd60e51b8152908101849052602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b828a5260978852888a20828b5288526001898b209182541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8a80a4388080610f66565b61ffff1916610101178b5538610ecb565b895162461bcd60e51b8152602081880152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610eb45750600189851614610eb4565b50600189851610610ead565b8780fd5b84913461020c57602036600319011261020c573563ffffffff60e01b811680910361020c5760209250637965db0b60e01b811490811561112f575b5015158152f35b6301ffc9a760e01b14905083611128565b600435906001600160a01b038216820361115657565b600080fd5b602435906001600160a01b038216820361115657565b6044359065ffffffffffff8216820361115657565b6060810190811067ffffffffffffffff8211176111a257604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176111a257604052565b90601f8019910116810190811067ffffffffffffffff8211176111a257604052565b67ffffffffffffffff81116111a257601f01601f191660200190565b906040519060208201926bffffffffffffffffffffffff199060601b16835260348201524660548201523060601b60748201526068815260a0810181811067ffffffffffffffff8211176111a25760405251902090565b91909165ffffffffffff8080941691160191821161128357565b634e487b7160e01b600052601160045260246000fd5b90816020910312611156575180151581036111565790565b9065ffffffffffff80421661012d91808354928160009788953387528361013396879281806020809c87825260409c8d9283832065ffffffffffff199e8f9860a01c168882541617905561013281528383208981549889161790555220541691169061131c91611269565b161015611562575061012e546001600160a01b039161133c918316611212565b96878a526101319283885280878c20541661150e57888b526101308852868b2054168410156114ca5754169584516370a0823160e01b815230600482015286816024818b5afa90811561143c578a91611499575b50818a5261012f90818852868b20541161144657818a52865284892054855163a9059cbb60e01b81523360048201526024810182905290978790829060449082908e905af1801561143c57918693917f739f8ee835b17b45c3440318f23a9a52f3b7b3194bd17cd54344eeb2aa59d908999a9b9361141f575b50825286522091825416179055519283523392a2565b61143590893d8b11610a2f57610a2081836111d4565b5038611409565b86513d8c823e3d90fd5b855162461bcd60e51b815260048101889052602660248201527f52656465656d436f64654661756365743a20696e73756666696369656e742062604482015265616c616e636560d01b6064820152608490fd5b90508681813d83116114c3575b6114b081836111d4565b810103126114bf575138611390565b8980fd5b503d6114a6565b855162461bcd60e51b815260048101889052601e60248201527f52656465656d436f64654661756365743a20636f6465206578706972656400006044820152606490fd5b865162461bcd60e51b815260048101899052602760248201527f52656465656d436f64654661756365743a20636f646520616c72656164792072604482015266195919595b595960ca1b6064820152608490fd5b9250508096979294955460a01c1694338352522092611585845493828516611269565b169116179055565b3360009081527f3360641542e133d9ce267924c5018ab505f382f31072a9fc8400a9ffb02e864b6020908152604080832054909290600080516020611d6a8339815191529060ff16156115e05750505050565b6115e933611b4a565b8451916115f5836111b8565b6042835284830193606036863783511561177d576030855383519060019182101561177d5790607860218601536041915b81831161170f575050506116cd5761167b9385936116b3936116a46048946116c99951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b97880152825192839160378901910161189b565b8401917001034b99036b4b9b9b4b733903937b6329607d1b60378401525180938684019061189b565b010360288101855201836111d4565b5162461bcd60e51b8152918291600483016118be565b0390fd5b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015611769576f181899199a1a9b1b9c1cb0b131b232b360811b901a61173f8588611b23565b5360041c92801561175557600019019190611626565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b600081815260209060978252604092838220338352835260ff8483205416156117ba5750505050565b6117c333611b4a565b8451916117cf836111b8565b6042835284830193606036863783511561177d576030855383519060019182101561177d5790607860218601536041915b818311611855575050506116cd5761167b9385936116b3936116a46048946116c99951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b97880152825192839160378901910161189b565b909192600f81166010811015611769576f181899199a1a9b1b9c1cb0b131b232b360811b901a6118858588611b23565b5360041c92801561175557600019019190611800565b60005b8381106118ae5750506000910152565b818101518382015260200161189e565b604091602082526118de815180928160208601526020868601910161189b565b601f01601f1916010190565b906000918083526097602052604083209160018060a01b03169182845260205260ff60408420541661191b57505050565b8083526097602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b1561196757565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6033546001600160a01b031633036119d457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b15611a6857565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15611ac957565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b908151811015611b34570160200190565b634e487b7160e01b600052603260045260246000fd5b60405190611b5782611186565b602a8252602082016040368237825115611b3457603090538151600190811015611b3457607860218401536029905b808211611bda575050611b965790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015611c33576f181899199a1a9b1b9c1cb0b131b232b360811b901a611c098486611b23565b5360041c918015611c1e576000190190611b86565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b803b15611c7d57600080516020611d8a83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b91929015611d3a5750815115611cec575090565b3b15611cf55790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611d4d5750805190602001fd5b60405162461bcd60e51b81529081906116c990600483016118be56fe707a390ecff002f977980b7598d697e51a8a18e7708b8f7ada4c1e67e5ea4808360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220633e36e1486aacfa5fb7959efae2432138345b9575eabd812baabe86791a80ed64736f6c6343000814003360a080604052346100315730608052611cfa9081610037823960805181818161098401528181610ae7015261109d0152f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a7146113d157508163248a9ca3146113a65781632f2ff15d146112f957816336568abe146112675781633659cfe6146110755781633ccfd60b14610d6a5781634f1ef28614610a6c5781635018c20914610a3157816352d1902d1461096e578163715018a61461090e57816377202ba1146106405781638da5cb5b1461061757816391d14854146105d05781639f4568ef1461058e578163a217fddf14610573578163a2d2c71c14610545578163a5ff3f801461051d578163aa8c217c146104fd578163be040fb0146103cd578163d547741f14610391578163f2fde38b146102ff578163f984c55c1461014e575063fc0c546a1461012257600080fd5b3461014a578160031936011261014a5761012d5490516001600160a01b039091168152602090f35b5080fd5b919050346102fb576020806003193601126102f7578361016c61143f565b61012f5465ffffffffffff42811696929181169081156102da576101a06101a992338752610130885282898820541661152d565b1687101561155d565b61012d5485516370a0823160e01b81523084820152926001600160a01b0390911691908584602481865afa9384156102d0579086949392918694610297575b5094610232956101fe61012e54809610156115ba565b885163a9059cbb60e01b81526001600160a01b03909316908301908152602081019490945290948593849291839160400190565b03925af1801561028d57906101309291610260575b503385525282209065ffffffffffff1982541617905580f35b61027f90823d8411610286575b61027781836114a3565b810190611611565b5038610247565b503d61026d565b83513d87823e3d90fd5b8581969295503d83116102c9575b6102af81836114a3565b810103126102c5579251859390926102326101e8565b8480fd5b503d6102a5565b87513d87823e3d90fd5b6102f2915033855261013086528685205416156114e1565b6101a9565b8380fd5b8280fd5b9050346102fb5760203660031901126102fb5761031a61143f565b916103236118fb565b6001600160a01b0383161561033f578361033c84611953565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b919050346102fb57806003193601126102fb5761033c91356103c860016103b6611424565b93838752609760205286200154611629565b611825565b919050346102fb57826003193601126102fb5761012f5465ffffffffffff428116939181169081156104df5761041461041d9233885261013060205282868920541661152d565b1684101561155d565b61012d5482516370a0823160e01b815230838201526020926001600160a01b03909216918382602481865afa9182156104d55790849291889261049e575b50926102329361047161012e54809410156115ba565b865163a9059cbb60e01b81523391810191825260208201939093529193849283918a918391604090910190565b8381949293503d83116104ce575b6104b681836114a3565b810103126104ca579051839161023261045b565b8680fd5b503d6104ac565b85513d89823e3d90fd5b6104f891503386526101306020528386205416156114e1565b61041d565b50503461014a578160031936011261014a5760209061012e549051908152f35b50503461014a578160031936011261014a5760209065ffffffffffff61012f54169051908152f35b50503461014a578160031936011261014a5761012f54905160309190911c6001600160a01b03168152602090f35b50503461014a578160031936011261014a5751908152602090f35b50503461014a57602036600319011261014a5760209165ffffffffffff9082906001600160a01b036105be61143f565b16815261013085522054169051908152f35b9050346102fb57816003193601126102fb578160209360ff926105f1611424565b90358252609786528282206001600160a01b039091168252855220549151911615158152f35b50503461014a578160031936011261014a5760335490516001600160a01b039091168152602090f35b9050346102fb5760a03660031901126102fb5761065b61143f565b6001600160a01b039160243583811692919083900361090a576064359365ffffffffffff85168095036104ca57608435948186168087036109065788549160ff97888460081c1615978880996108fa575b80156108e4575b1561088a5760ff198581166001178d559489610879575b506106e38a8d5460081c166106de8161189b565b61189b565b6106ec33611953565b6106fb8a8d5460081c1661189b565b61012d80546001600160a01b031916909117905560443561012e5561012f80546001600160d01b03191690921760309190911b6601000000000000600160d01b03161790557f281081d9b36b37208f0d8dfce5adc7e00d31ece09269aaa8d0bfa43e6840a338808a5260976020908152898b20838c528152898b205490989193911615610830575b50505061078e6118fb565b8216156107de575061079f90611953565b6107a7578280f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a138808280f35b845162461bcd60e51b8152908101849052602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b828a5260978852888a20828b5288526001898b209182541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8a80a4388080610783565b61ffff1916610101178c55386106ca565b8a5162461bcd60e51b8152602081890152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156106b3575060018a8616146106b3565b5060018a8616106106ac565b8880fd5b8580fd5b833461096b578060031936011261096b576109276118fb565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b9050823461096b578060031936011261096b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036109c95760208251600080516020611ca58339815191528152f35b6020608492519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b50503461014a578160031936011261014a57602090517f281081d9b36b37208f0d8dfce5adc7e00d31ece09269aaa8d0bfa43e6840a3388152f35b918091506003193601126102fb57610a8261143f565b906024359067ffffffffffffffff82116102c557366023830112156102c55781840135610aae816114c5565b610aba835191826114a3565b818152866020948583019336602482840101116102fb578060248893018637830101526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690610b153083141561199c565b610b32600080516020611ca58339815191529282845416146119fd565b610b3a6118fb565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b745750505050505061033c9150611b83565b869293949596169085516352d1902d60e01b815287818a81865afa8a9181610d37575b50610bf657865162461bcd60e51b8152808a01899052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b979192939695949703610ce25750610c0d82611b83565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8780a285845115801590610cda575b610c4b575b50505050505080f35b80610cc496845196610c5c88611455565b602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b868901525190845af4913d15610cd0573d610cb6610cad826114c5565b925192836114a3565b81528681943d92013e611c13565b50388080808085610c42565b5060609250611c13565b506001610c3d565b835162461bcd60e51b8152908101859052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508881813d8311610d63575b610d4f81836114a3565b81010312610d5f57519038610b97565b8a80fd5b503d610d45565b919050346102fb57826003193601126102fb577f281081d9b36b37208f0d8dfce5adc7e00d31ece09269aaa8d0bfa43e6840a3389182845260209260978452828520338652845260ff838620541615610eb4575061012d5461012f5483516370a0823160e01b8152308185015286949390926001600160a01b039081169260301c16908684602481865afa938415610eaa579087949392918794610e75575b50855163a9059cbb60e01b81526001600160a01b03909216908201908152602081019390935294859283919082906040015b03925af1908115610e6c5750610e4f578280f35b81610e6592903d106102865761027781836114a3565b5038808280f35b513d85823e3d90fd5b8581969295503d8311610ea3575b610e8d81836114a3565b8101031261090a57925186939092610e3b610e09565b503d610e83565b85513d88823e3d90fd5b848491610ec033611a85565b855191610ecc83611487565b60428352848301936060368637835115611062576030855383519060019182101561104f5790607860218601536041915b818311610fe457505050610fa257610f9e938693610f8a93610f7b604894610f529a519a8576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8d9788015282519283916037890191016117d6565b8401917001034b99036b4b9b9b4b733903937b6329607d1b6037840152518093868401906117d6565b010360288101875201856114a3565b5162461bcd60e51b815292839283016117f9565b0390fd5b50505080606493519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f8116601081101561103c576f181899199a1a9b1b9c1cb0b131b232b360811b901a6110148588611a5e565b53881c92801561102957600019019190610efd565b634e487b7160e01b825260118952602482fd5b634e487b7160e01b835260328a52602483fd5b634e487b7160e01b815260328852602490fd5b634e487b7160e01b815260328752602490fd5b919050346102fb576020806003193601126102f75761109261143f565b916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166110ca3082141561199c565b6110e7600080516020611ca58339815191529183835416146119fd565b6110ef6118fb565b8251908482019282841067ffffffffffffffff851117611254578385528883527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156111495750505050505061033c9150611b83565b869293949596169085516352d1902d60e01b815287818a81865afa8a9181611225575b506111cb57865162461bcd60e51b8152808a01899052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b979192939695949703610ce257506111e282611b83565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8780a28584511580159061121e57610c4b5750505050505080f35b5080610c3d565b9091508881813d831161124d575b61123d81836114a3565b81010312610d5f5751903861116c565b503d611233565b634e487b7160e01b895260418852602489fd5b8391503461014a578260031936011261014a57611282611424565b90336001600160a01b0383160361129e579061033c9135611825565b608490602085519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b9050346102fb57816003193601126102fb573590611315611424565b90828452609760205261132d60018286200154611629565b828452609760209081528185206001600160a01b039093168086529290528084205460ff161561135b578380f35b82845260976020528084208285526020528320600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8480a43880808380f35b9050346102fb5760203660031901126102fb5781602093600192358152609785522001549051908152f35b8491346102fb5760203660031901126102fb573563ffffffff60e01b81168091036102fb5760209250637965db0b60e01b8114908115611413575b5015158152f35b6301ffc9a760e01b1490508361140c565b602435906001600160a01b038216820361143a57565b600080fd5b600435906001600160a01b038216820361143a57565b6060810190811067ffffffffffffffff82111761147157604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761147157604052565b90601f8019910116810190811067ffffffffffffffff82111761147157604052565b67ffffffffffffffff811161147157601f01601f191660200190565b156114e857565b60405162461bcd60e51b815260206004820152601e60248201527f53696d706c654661756365743a20616c72656164792072656465656d656400006044820152606490fd5b91909165ffffffffffff8080941691160191821161154757565b634e487b7160e01b600052601160045260246000fd5b1561156457565b60405162461bcd60e51b815260206004820152602860248201527f53696d706c654661756365743a2072656465656d20696e74657276616c206e6f6044820152671d081c185cdcd95960c21b6064820152608490fd5b156115c157565b60405162461bcd60e51b815260206004820152602260248201527f53696d706c654661756365743a20696e73756666696369656e742062616c616e604482015261636560f01b6064820152608490fd5b9081602091031261143a5751801515810361143a5790565b600081815260209060978252604092838220338352835260ff8483205416156116525750505050565b61165b33611a85565b84519161166783611487565b604283528483019360603686378351156117c257603085538351906001918210156117c25790607860218601536041915b8183116117545750505061171257610f529385936116fc936116ed604894610f9e9951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b9788015282519283916037890191016117d6565b010360288101855201836114a3565b5162461bcd60e51b8152918291600483016117f9565b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f811660108110156117ae576f181899199a1a9b1b9c1cb0b131b232b360811b901a6117848588611a5e565b5360041c92801561179a57600019019190611698565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b60005b8381106117e95750506000910152565b81810151838201526020016117d9565b6040916020825261181981518092816020860152602086860191016117d6565b601f01601f1916010190565b906000918083526097602052604083209160018060a01b03169182845260205260ff60408420541661185657505050565b8083526097602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b156118a257565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6033546001600160a01b0316330361190f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b156119a357565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15611a0457565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b908151811015611a6f570160200190565b634e487b7160e01b600052603260045260246000fd5b60405190611a9282611455565b602a8252602082016040368237825115611a6f57603090538151600190811015611a6f57607860218401536029905b808211611b15575050611ad15790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015611b6e576f181899199a1a9b1b9c1cb0b131b232b360811b901a611b448486611a5e565b5360041c918015611b59576000190190611ac1565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b803b15611bb857600080516020611ca583398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b91929015611c755750815115611c27575090565b3b15611c305790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611c885750805190602001fd5b60405162461bcd60e51b8152908190610f9e90600483016117f956fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220e6df4789e039dd5feadbe1815d6b155b9784c3ce8afd48f33859d1225990534764736f6c63430008140033",
}

// FaucetFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use FaucetFactoryMetaData.ABI instead.
var FaucetFactoryABI = FaucetFactoryMetaData.ABI

// FaucetFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FaucetFactoryMetaData.Bin instead.
var FaucetFactoryBin = FaucetFactoryMetaData.Bin

// DeployFaucetFactory deploys a new Ethereum contract, binding an instance of FaucetFactory to it.
func DeployFaucetFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FaucetFactory, error) {
	parsed, err := FaucetFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FaucetFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FaucetFactory{FaucetFactoryCaller: FaucetFactoryCaller{contract: contract}, FaucetFactoryTransactor: FaucetFactoryTransactor{contract: contract}, FaucetFactoryFilterer: FaucetFactoryFilterer{contract: contract}}, nil
}

// FaucetFactory is an auto generated Go binding around an Ethereum contract.
type FaucetFactory struct {
	FaucetFactoryCaller     // Read-only binding to the contract
	FaucetFactoryTransactor // Write-only binding to the contract
	FaucetFactoryFilterer   // Log filterer for contract events
}

// FaucetFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type FaucetFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FaucetFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FaucetFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FaucetFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FaucetFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FaucetFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FaucetFactorySession struct {
	Contract     *FaucetFactory    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FaucetFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FaucetFactoryCallerSession struct {
	Contract *FaucetFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// FaucetFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FaucetFactoryTransactorSession struct {
	Contract     *FaucetFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// FaucetFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type FaucetFactoryRaw struct {
	Contract *FaucetFactory // Generic contract binding to access the raw methods on
}

// FaucetFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FaucetFactoryCallerRaw struct {
	Contract *FaucetFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// FaucetFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FaucetFactoryTransactorRaw struct {
	Contract *FaucetFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFaucetFactory creates a new instance of FaucetFactory, bound to a specific deployed contract.
func NewFaucetFactory(address common.Address, backend bind.ContractBackend) (*FaucetFactory, error) {
	contract, err := bindFaucetFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FaucetFactory{FaucetFactoryCaller: FaucetFactoryCaller{contract: contract}, FaucetFactoryTransactor: FaucetFactoryTransactor{contract: contract}, FaucetFactoryFilterer: FaucetFactoryFilterer{contract: contract}}, nil
}

// NewFaucetFactoryCaller creates a new read-only instance of FaucetFactory, bound to a specific deployed contract.
func NewFaucetFactoryCaller(address common.Address, caller bind.ContractCaller) (*FaucetFactoryCaller, error) {
	contract, err := bindFaucetFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FaucetFactoryCaller{contract: contract}, nil
}

// NewFaucetFactoryTransactor creates a new write-only instance of FaucetFactory, bound to a specific deployed contract.
func NewFaucetFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*FaucetFactoryTransactor, error) {
	contract, err := bindFaucetFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FaucetFactoryTransactor{contract: contract}, nil
}

// NewFaucetFactoryFilterer creates a new log filterer instance of FaucetFactory, bound to a specific deployed contract.
func NewFaucetFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*FaucetFactoryFilterer, error) {
	contract, err := bindFaucetFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FaucetFactoryFilterer{contract: contract}, nil
}

// bindFaucetFactory binds a generic wrapper to an already deployed contract.
func bindFaucetFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FaucetFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FaucetFactory *FaucetFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FaucetFactory.Contract.FaucetFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FaucetFactory *FaucetFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FaucetFactory.Contract.FaucetFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FaucetFactory *FaucetFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FaucetFactory.Contract.FaucetFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FaucetFactory *FaucetFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FaucetFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FaucetFactory *FaucetFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FaucetFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FaucetFactory *FaucetFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FaucetFactory.Contract.contract.Transact(opts, method, params...)
}

// GetRedeemCodeFaucetAddress is a free data retrieval call binding the contract method 0x65895758.
//
// Solidity: function getRedeemCodeFaucetAddress(address owner, uint256 salt, address _token, uint48 _redeemInterval, address _codeCreator) view returns(address)
func (_FaucetFactory *FaucetFactoryCaller) GetRedeemCodeFaucetAddress(opts *bind.CallOpts, owner common.Address, salt *big.Int, _token common.Address, _redeemInterval *big.Int, _codeCreator common.Address) (common.Address, error) {
	var out []interface{}
	err := _FaucetFactory.contract.Call(opts, &out, "getRedeemCodeFaucetAddress", owner, salt, _token, _redeemInterval, _codeCreator)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRedeemCodeFaucetAddress is a free data retrieval call binding the contract method 0x65895758.
//
// Solidity: function getRedeemCodeFaucetAddress(address owner, uint256 salt, address _token, uint48 _redeemInterval, address _codeCreator) view returns(address)
func (_FaucetFactory *FaucetFactorySession) GetRedeemCodeFaucetAddress(owner common.Address, salt *big.Int, _token common.Address, _redeemInterval *big.Int, _codeCreator common.Address) (common.Address, error) {
	return _FaucetFactory.Contract.GetRedeemCodeFaucetAddress(&_FaucetFactory.CallOpts, owner, salt, _token, _redeemInterval, _codeCreator)
}

// GetRedeemCodeFaucetAddress is a free data retrieval call binding the contract method 0x65895758.
//
// Solidity: function getRedeemCodeFaucetAddress(address owner, uint256 salt, address _token, uint48 _redeemInterval, address _codeCreator) view returns(address)
func (_FaucetFactory *FaucetFactoryCallerSession) GetRedeemCodeFaucetAddress(owner common.Address, salt *big.Int, _token common.Address, _redeemInterval *big.Int, _codeCreator common.Address) (common.Address, error) {
	return _FaucetFactory.Contract.GetRedeemCodeFaucetAddress(&_FaucetFactory.CallOpts, owner, salt, _token, _redeemInterval, _codeCreator)
}

// GetSimpleFaucetAddress is a free data retrieval call binding the contract method 0x09e5223e.
//
// Solidity: function getSimpleFaucetAddress(address owner, uint256 salt, address _token, uint256 _amount, uint48 _redeemInterval, address _redeemAdmin) view returns(address)
func (_FaucetFactory *FaucetFactoryCaller) GetSimpleFaucetAddress(opts *bind.CallOpts, owner common.Address, salt *big.Int, _token common.Address, _amount *big.Int, _redeemInterval *big.Int, _redeemAdmin common.Address) (common.Address, error) {
	var out []interface{}
	err := _FaucetFactory.contract.Call(opts, &out, "getSimpleFaucetAddress", owner, salt, _token, _amount, _redeemInterval, _redeemAdmin)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSimpleFaucetAddress is a free data retrieval call binding the contract method 0x09e5223e.
//
// Solidity: function getSimpleFaucetAddress(address owner, uint256 salt, address _token, uint256 _amount, uint48 _redeemInterval, address _redeemAdmin) view returns(address)
func (_FaucetFactory *FaucetFactorySession) GetSimpleFaucetAddress(owner common.Address, salt *big.Int, _token common.Address, _amount *big.Int, _redeemInterval *big.Int, _redeemAdmin common.Address) (common.Address, error) {
	return _FaucetFactory.Contract.GetSimpleFaucetAddress(&_FaucetFactory.CallOpts, owner, salt, _token, _amount, _redeemInterval, _redeemAdmin)
}

// GetSimpleFaucetAddress is a free data retrieval call binding the contract method 0x09e5223e.
//
// Solidity: function getSimpleFaucetAddress(address owner, uint256 salt, address _token, uint256 _amount, uint48 _redeemInterval, address _redeemAdmin) view returns(address)
func (_FaucetFactory *FaucetFactoryCallerSession) GetSimpleFaucetAddress(owner common.Address, salt *big.Int, _token common.Address, _amount *big.Int, _redeemInterval *big.Int, _redeemAdmin common.Address) (common.Address, error) {
	return _FaucetFactory.Contract.GetSimpleFaucetAddress(&_FaucetFactory.CallOpts, owner, salt, _token, _amount, _redeemInterval, _redeemAdmin)
}

// RedeemCodeFaucetImplementation is a free data retrieval call binding the contract method 0x76c40417.
//
// Solidity: function redeemCodeFaucetImplementation() view returns(address)
func (_FaucetFactory *FaucetFactoryCaller) RedeemCodeFaucetImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FaucetFactory.contract.Call(opts, &out, "redeemCodeFaucetImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RedeemCodeFaucetImplementation is a free data retrieval call binding the contract method 0x76c40417.
//
// Solidity: function redeemCodeFaucetImplementation() view returns(address)
func (_FaucetFactory *FaucetFactorySession) RedeemCodeFaucetImplementation() (common.Address, error) {
	return _FaucetFactory.Contract.RedeemCodeFaucetImplementation(&_FaucetFactory.CallOpts)
}

// RedeemCodeFaucetImplementation is a free data retrieval call binding the contract method 0x76c40417.
//
// Solidity: function redeemCodeFaucetImplementation() view returns(address)
func (_FaucetFactory *FaucetFactoryCallerSession) RedeemCodeFaucetImplementation() (common.Address, error) {
	return _FaucetFactory.Contract.RedeemCodeFaucetImplementation(&_FaucetFactory.CallOpts)
}

// SimpleFaucetImplementation is a free data retrieval call binding the contract method 0x6057b63d.
//
// Solidity: function simpleFaucetImplementation() view returns(address)
func (_FaucetFactory *FaucetFactoryCaller) SimpleFaucetImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FaucetFactory.contract.Call(opts, &out, "simpleFaucetImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SimpleFaucetImplementation is a free data retrieval call binding the contract method 0x6057b63d.
//
// Solidity: function simpleFaucetImplementation() view returns(address)
func (_FaucetFactory *FaucetFactorySession) SimpleFaucetImplementation() (common.Address, error) {
	return _FaucetFactory.Contract.SimpleFaucetImplementation(&_FaucetFactory.CallOpts)
}

// SimpleFaucetImplementation is a free data retrieval call binding the contract method 0x6057b63d.
//
// Solidity: function simpleFaucetImplementation() view returns(address)
func (_FaucetFactory *FaucetFactoryCallerSession) SimpleFaucetImplementation() (common.Address, error) {
	return _FaucetFactory.Contract.SimpleFaucetImplementation(&_FaucetFactory.CallOpts)
}

// CreateRedeemCodeFaucet is a paid mutator transaction binding the contract method 0x4a40c132.
//
// Solidity: function createRedeemCodeFaucet(address owner, uint256 salt, address _token, uint48 _redeemInterval, address _codeCreator) returns(address ret)
func (_FaucetFactory *FaucetFactoryTransactor) CreateRedeemCodeFaucet(opts *bind.TransactOpts, owner common.Address, salt *big.Int, _token common.Address, _redeemInterval *big.Int, _codeCreator common.Address) (*types.Transaction, error) {
	return _FaucetFactory.contract.Transact(opts, "createRedeemCodeFaucet", owner, salt, _token, _redeemInterval, _codeCreator)
}

// CreateRedeemCodeFaucet is a paid mutator transaction binding the contract method 0x4a40c132.
//
// Solidity: function createRedeemCodeFaucet(address owner, uint256 salt, address _token, uint48 _redeemInterval, address _codeCreator) returns(address ret)
func (_FaucetFactory *FaucetFactorySession) CreateRedeemCodeFaucet(owner common.Address, salt *big.Int, _token common.Address, _redeemInterval *big.Int, _codeCreator common.Address) (*types.Transaction, error) {
	return _FaucetFactory.Contract.CreateRedeemCodeFaucet(&_FaucetFactory.TransactOpts, owner, salt, _token, _redeemInterval, _codeCreator)
}

// CreateRedeemCodeFaucet is a paid mutator transaction binding the contract method 0x4a40c132.
//
// Solidity: function createRedeemCodeFaucet(address owner, uint256 salt, address _token, uint48 _redeemInterval, address _codeCreator) returns(address ret)
func (_FaucetFactory *FaucetFactoryTransactorSession) CreateRedeemCodeFaucet(owner common.Address, salt *big.Int, _token common.Address, _redeemInterval *big.Int, _codeCreator common.Address) (*types.Transaction, error) {
	return _FaucetFactory.Contract.CreateRedeemCodeFaucet(&_FaucetFactory.TransactOpts, owner, salt, _token, _redeemInterval, _codeCreator)
}

// CreateSimpleFaucet is a paid mutator transaction binding the contract method 0xc8a66cb0.
//
// Solidity: function createSimpleFaucet(address owner, uint256 salt, address _token, uint256 _amount, uint48 _redeemInterval, address _redeemAdmin) returns(address ret)
func (_FaucetFactory *FaucetFactoryTransactor) CreateSimpleFaucet(opts *bind.TransactOpts, owner common.Address, salt *big.Int, _token common.Address, _amount *big.Int, _redeemInterval *big.Int, _redeemAdmin common.Address) (*types.Transaction, error) {
	return _FaucetFactory.contract.Transact(opts, "createSimpleFaucet", owner, salt, _token, _amount, _redeemInterval, _redeemAdmin)
}

// CreateSimpleFaucet is a paid mutator transaction binding the contract method 0xc8a66cb0.
//
// Solidity: function createSimpleFaucet(address owner, uint256 salt, address _token, uint256 _amount, uint48 _redeemInterval, address _redeemAdmin) returns(address ret)
func (_FaucetFactory *FaucetFactorySession) CreateSimpleFaucet(owner common.Address, salt *big.Int, _token common.Address, _amount *big.Int, _redeemInterval *big.Int, _redeemAdmin common.Address) (*types.Transaction, error) {
	return _FaucetFactory.Contract.CreateSimpleFaucet(&_FaucetFactory.TransactOpts, owner, salt, _token, _amount, _redeemInterval, _redeemAdmin)
}

// CreateSimpleFaucet is a paid mutator transaction binding the contract method 0xc8a66cb0.
//
// Solidity: function createSimpleFaucet(address owner, uint256 salt, address _token, uint256 _amount, uint48 _redeemInterval, address _redeemAdmin) returns(address ret)
func (_FaucetFactory *FaucetFactoryTransactorSession) CreateSimpleFaucet(owner common.Address, salt *big.Int, _token common.Address, _amount *big.Int, _redeemInterval *big.Int, _redeemAdmin common.Address) (*types.Transaction, error) {
	return _FaucetFactory.Contract.CreateSimpleFaucet(&_FaucetFactory.TransactOpts, owner, salt, _token, _amount, _redeemInterval, _redeemAdmin)
}

// FaucetFactoryRedeemCodeFaucetCreatedIterator is returned from FilterRedeemCodeFaucetCreated and is used to iterate over the raw logs and unpacked data for RedeemCodeFaucetCreated events raised by the FaucetFactory contract.
type FaucetFactoryRedeemCodeFaucetCreatedIterator struct {
	Event *FaucetFactoryRedeemCodeFaucetCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FaucetFactoryRedeemCodeFaucetCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FaucetFactoryRedeemCodeFaucetCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FaucetFactoryRedeemCodeFaucetCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FaucetFactoryRedeemCodeFaucetCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FaucetFactoryRedeemCodeFaucetCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FaucetFactoryRedeemCodeFaucetCreated represents a RedeemCodeFaucetCreated event raised by the FaucetFactory contract.
type FaucetFactoryRedeemCodeFaucetCreated struct {
	Faucet         common.Address
	Token          common.Address
	Amount         *big.Int
	RedeemInterval *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRedeemCodeFaucetCreated is a free log retrieval operation binding the contract event 0xb93973492142c237facfddbc7e4e65070b940426b6a350b2c3cc492bf1970734.
//
// Solidity: event RedeemCodeFaucetCreated(address indexed faucet, address token, uint256 amount, uint48 redeemInterval)
func (_FaucetFactory *FaucetFactoryFilterer) FilterRedeemCodeFaucetCreated(opts *bind.FilterOpts, faucet []common.Address) (*FaucetFactoryRedeemCodeFaucetCreatedIterator, error) {

	var faucetRule []interface{}
	for _, faucetItem := range faucet {
		faucetRule = append(faucetRule, faucetItem)
	}

	logs, sub, err := _FaucetFactory.contract.FilterLogs(opts, "RedeemCodeFaucetCreated", faucetRule)
	if err != nil {
		return nil, err
	}
	return &FaucetFactoryRedeemCodeFaucetCreatedIterator{contract: _FaucetFactory.contract, event: "RedeemCodeFaucetCreated", logs: logs, sub: sub}, nil
}

// WatchRedeemCodeFaucetCreated is a free log subscription operation binding the contract event 0xb93973492142c237facfddbc7e4e65070b940426b6a350b2c3cc492bf1970734.
//
// Solidity: event RedeemCodeFaucetCreated(address indexed faucet, address token, uint256 amount, uint48 redeemInterval)
func (_FaucetFactory *FaucetFactoryFilterer) WatchRedeemCodeFaucetCreated(opts *bind.WatchOpts, sink chan<- *FaucetFactoryRedeemCodeFaucetCreated, faucet []common.Address) (event.Subscription, error) {

	var faucetRule []interface{}
	for _, faucetItem := range faucet {
		faucetRule = append(faucetRule, faucetItem)
	}

	logs, sub, err := _FaucetFactory.contract.WatchLogs(opts, "RedeemCodeFaucetCreated", faucetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FaucetFactoryRedeemCodeFaucetCreated)
				if err := _FaucetFactory.contract.UnpackLog(event, "RedeemCodeFaucetCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemCodeFaucetCreated is a log parse operation binding the contract event 0xb93973492142c237facfddbc7e4e65070b940426b6a350b2c3cc492bf1970734.
//
// Solidity: event RedeemCodeFaucetCreated(address indexed faucet, address token, uint256 amount, uint48 redeemInterval)
func (_FaucetFactory *FaucetFactoryFilterer) ParseRedeemCodeFaucetCreated(log types.Log) (*FaucetFactoryRedeemCodeFaucetCreated, error) {
	event := new(FaucetFactoryRedeemCodeFaucetCreated)
	if err := _FaucetFactory.contract.UnpackLog(event, "RedeemCodeFaucetCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FaucetFactorySimpleFaucetCreatedIterator is returned from FilterSimpleFaucetCreated and is used to iterate over the raw logs and unpacked data for SimpleFaucetCreated events raised by the FaucetFactory contract.
type FaucetFactorySimpleFaucetCreatedIterator struct {
	Event *FaucetFactorySimpleFaucetCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FaucetFactorySimpleFaucetCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FaucetFactorySimpleFaucetCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FaucetFactorySimpleFaucetCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FaucetFactorySimpleFaucetCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FaucetFactorySimpleFaucetCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FaucetFactorySimpleFaucetCreated represents a SimpleFaucetCreated event raised by the FaucetFactory contract.
type FaucetFactorySimpleFaucetCreated struct {
	Faucet         common.Address
	Token          common.Address
	Amount         *big.Int
	RedeemInterval *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSimpleFaucetCreated is a free log retrieval operation binding the contract event 0xfe6b2ca53152946ea448fc2f0d59bb5c77fd6a42dfe98fecb30750d2baaf8a31.
//
// Solidity: event SimpleFaucetCreated(address indexed faucet, address token, uint256 amount, uint48 redeemInterval)
func (_FaucetFactory *FaucetFactoryFilterer) FilterSimpleFaucetCreated(opts *bind.FilterOpts, faucet []common.Address) (*FaucetFactorySimpleFaucetCreatedIterator, error) {

	var faucetRule []interface{}
	for _, faucetItem := range faucet {
		faucetRule = append(faucetRule, faucetItem)
	}

	logs, sub, err := _FaucetFactory.contract.FilterLogs(opts, "SimpleFaucetCreated", faucetRule)
	if err != nil {
		return nil, err
	}
	return &FaucetFactorySimpleFaucetCreatedIterator{contract: _FaucetFactory.contract, event: "SimpleFaucetCreated", logs: logs, sub: sub}, nil
}

// WatchSimpleFaucetCreated is a free log subscription operation binding the contract event 0xfe6b2ca53152946ea448fc2f0d59bb5c77fd6a42dfe98fecb30750d2baaf8a31.
//
// Solidity: event SimpleFaucetCreated(address indexed faucet, address token, uint256 amount, uint48 redeemInterval)
func (_FaucetFactory *FaucetFactoryFilterer) WatchSimpleFaucetCreated(opts *bind.WatchOpts, sink chan<- *FaucetFactorySimpleFaucetCreated, faucet []common.Address) (event.Subscription, error) {

	var faucetRule []interface{}
	for _, faucetItem := range faucet {
		faucetRule = append(faucetRule, faucetItem)
	}

	logs, sub, err := _FaucetFactory.contract.WatchLogs(opts, "SimpleFaucetCreated", faucetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FaucetFactorySimpleFaucetCreated)
				if err := _FaucetFactory.contract.UnpackLog(event, "SimpleFaucetCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSimpleFaucetCreated is a log parse operation binding the contract event 0xfe6b2ca53152946ea448fc2f0d59bb5c77fd6a42dfe98fecb30750d2baaf8a31.
//
// Solidity: event SimpleFaucetCreated(address indexed faucet, address token, uint256 amount, uint48 redeemInterval)
func (_FaucetFactory *FaucetFactoryFilterer) ParseSimpleFaucetCreated(log types.Log) (*FaucetFactorySimpleFaucetCreated, error) {
	event := new(FaucetFactorySimpleFaucetCreated)
	if err := _FaucetFactory.contract.UnpackLog(event, "SimpleFaucetCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
