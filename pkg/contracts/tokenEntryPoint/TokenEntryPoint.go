// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tokenEntryPoint

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// UserOperation is an auto generated low-level Go binding around an user-defined struct.
type UserOperation struct {
	Sender               common.Address
	Nonce                *big.Int
	InitCode             []byte
	CallData             []byte
	CallGasLimit         *big.Int
	VerificationGasLimit *big.Int
	PreVerificationGas   *big.Int
	MaxFeePerGas         *big.Int
	MaxPriorityFeePerGas *big.Int
	PaymasterAndData     []byte
	Signature            []byte
}

// TokenEntryPointMetaData contains all meta data concerning the TokenEntryPoint contract.
var TokenEntryPointMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractINonceManager\",\"name\":\"anEntryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"_isAddressInList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"structUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"getUserOpHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"structUserOperation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"addresspayable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"anOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aPaymaster\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPaymaster\",\"type\":\"address\"}],\"name\":\"updatePaymaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60c0604052306080523480156200001557600080fd5b5060405162002a1a38038062002a1a833981016040819052620000389162000117565b6001600160a01b03811660a0526200004f62000056565b5062000149565b600054610100900460ff1615620000c35760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000115576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012a57600080fd5b81516001600160a01b03811681146200014257600080fd5b9392505050565b60805160a05161288f6200018b600039600061049d01526000818161051b0152818161055b0152818161071b0152818161075b01526107ee015261288f6000f3fe6080604052600436106100e85760003560e01c806352d1902d1161008a5780639c90b443116100595780639c90b44314610257578063a619353114610284578063daf6a3f6146102a4578063f2fde38b146102c457600080fd5b806352d1902d146101d557806370dc3611146101ea578063715018a61461021a5780638da5cb5b1461022f57600080fd5b806335567e1a116100c657806335567e1a1461014f5780633659cfe614610182578063485cc955146101a25780634f1ef286146101c257600080fd5b80630bd28e3b146100ed5780631fad948c1461010f578063353772141461012f575b600080fd5b3480156100f957600080fd5b5061010d610108366004611b4d565b6102e4565b005b34801561011b57600080fd5b5061010d61012a366004611bc8565b6102ef565b34801561013b57600080fd5b5061010d61014a366004611c1e565b610458565b34801561015b57600080fd5b5061016f61016a366004611c6a565b61046c565b6040519081526020015b60405180910390f35b34801561018e57600080fd5b5061010d61019d366004611c9f565b610511565b3480156101ae57600080fd5b5061010d6101bd366004611cbc565b6105ed565b61010d6101d0366004611db8565b610711565b3480156101e157600080fd5b5061016f6107e1565b3480156101f657600080fd5b5061020a610205366004611e99565b610894565b6040519015158152602001610179565b34801561022657600080fd5b5061010d6108fb565b34801561023b57600080fd5b506065546040516001600160a01b039091168152602001610179565b34801561026357600080fd5b5061016f610272366004611c9f565b60fd6020526000908152604090205481565b34801561029057600080fd5b5061016f61029f366004611ede565b61090f565b3480156102b057600080fd5b5061010d6102bf366004611c9f565b610951565b3480156102d057600080fd5b5061010d6102df366004611c9f565b6109bd565b6102ec610a33565b50565b6102f7610a8d565b816103535760405162461bcd60e51b815260206004820152602160248201527f6e65656473206174206c65617374206f6e652075736572206f7065726174696f6044820152603760f91b60648201526084015b60405180910390fd5b8160005b81811015610448573685858381811061037257610372611f19565b90506020028101906103849190611f2f565b905080356103928282610ae6565b61039c8282610b38565b6103a68282610ec6565b6103af82610fa1565b6103fc8160006103c26060860186611f50565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061105d92505050565b61043e5760405162461bcd60e51b81526020600482015260136024820152721bdc08195e1958dd5d1a5bdb8819985a5b1959606a1b604482015260640161034a565b5050600101610357565b505061045360018055565b505050565b610460610a33565b61045360ff8383611aac565b604051631aab3f0d60e11b81526001600160a01b0383811660048301526001600160c01b03831660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906335567e1a90604401602060405180830381865afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a9190611f96565b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105595760405162461bcd60e51b815260040161034a90611faf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105a2600080516020612813833981519152546001600160a01b031690565b6001600160a01b0316146105c85760405162461bcd60e51b815260040161034a90611ffb565b6105d1816102e4565b604080516000808252602082019092526102ec918391906110d0565b600054610100900460ff161580801561060d5750600054600160ff909116105b806106275750303b158015610627575060005460ff166001145b61068a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161034a565b6000805460ff1916600117905580156106ad576000805461ff0019166101001790555b6106b561123b565b6106bd61126a565b6106c78383611299565b8015610453576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107595760405162461bcd60e51b815260040161034a90611faf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107a2600080516020612813833981519152546001600160a01b031690565b6001600160a01b0316146107c85760405162461bcd60e51b815260040161034a90611ffb565b6107d1826102e4565b6107dd828260016110d0565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108815760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161034a565b5060008051602061281383398151915290565b6000805b82518110156108ef57836001600160a01b03168382815181106108bd576108bd611f19565b60200260200101516001600160a01b0316036108dd5760019150506108f5565b806108e781612047565b915050610898565b50600090505b92915050565b610903610a33565b61090d600061138b565b565b600061091a826113dd565b6040805160208101929092523090820152466060820152608001604051602081830303815290604052805190602001209050919050565b610959610a33565b803b61099b5760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b2103830bcb6b0b9ba32b960791b604482015260640161034a565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b6109c5610a33565b6001600160a01b038116610a2a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161034a565b6102ec8161138b565b6065546001600160a01b0316331461090d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161034a565b600260015403610adf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161034a565b6002600155565b6000610af382600061046c565b9050826020013581146104535760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964206e6f6e636560981b604482015260640161034a565b6004610b476060840184611f50565b90501015610b8a5760405162461bcd60e51b815260206004820152601060248201526f696e76616c69642063616c6c4461746160801b604482015260640161034a565b6000610b996060840184611f50565b610ba89160049160009161206e565b610bb191612098565b90506001600160e01b03198116610c065760405162461bcd60e51b815260206004820152601960248201527834b73b30b634b210333ab731ba34b7b71039b2b632b1ba37b960391b604482015260640161034a565b60fe5460e01b6001600160e01b03199081169082161480610c40575060fe546001600160e01b031982811664010000000090920460e01b16145b610c885760405162461bcd60e51b815260206004820152601960248201527834b73b30b634b210333ab731ba34b7b71039b2b632b1ba37b960391b604482015260640161034a565b60fe5460e01b6001600160e01b031990811690821603610d83576000610cb9610cb46060860186611f50565b6113f6565b9050826001600160a01b0316816001600160a01b03161480610d3a5750610d3a8160ff805480602002602001604051908101604052809291908181526020018280548015610d3057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d12575b5050505050610894565b610d815760405162461bcd60e51b815260206004820152601860248201527718dbdb9d1c9858dd081b9bdd081dda1a5d195b1a5cdd195960421b604482015260640161034a565b505b60fe546001600160e01b031964010000000090910460e01b811690821603610453576000610dbc610db76060860186611f50565b61141e565b905060005b8151811015610ebf576000828281518110610dde57610dde611f19565b60200260200101519050846001600160a01b0316816001600160a01b03161480610e655750610e658160ff805480602002602001604051908101604052809291908181526020018280548015610d30576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610d12575050505050610894565b610eac5760405162461bcd60e51b815260206004820152601860248201527718dbdb9d1c9858dd081b9bdd081dda1a5d195b1a5cdd195960421b604482015260640161034a565b5080610eb781612047565b915050610dc1565b5050505050565b8160200135600003610edb57610edb8261143c565b806001600160a01b03811663fff35b7284610ef58161090f565b6040518363ffffffff1660e01b8152600401610f1292919061222d565b6020604051808303816000875af1158015610f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f55919061224f565b6104535760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964206163636f756e74207369676e617475726500000000000000604482015260640161034a565b6000610fac8261160e565b9050600080826001600160a01b031663f465c77e85610fca876113dd565b60006040518463ffffffff1660e01b8152600401610fea93929190612271565b6000604051808303816000875af1158015611009573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261103191908101906122ba565b9150915080600014611057578160405162461bcd60e51b815260040161034a919061233a565b50505050565b6000806000856001600160a01b0316858560405161107b919061236d565b60006040518083038185875af1925050503d80600081146110b8576040519150601f19603f3d011682016040523d82523d6000602084013e6110bd565b606091505b5090979650505050505050565b60018055565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156111035761045383611733565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561115d575060408051601f3d908101601f1916820190925261115a91810190611f96565b60015b6111c05760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161034a565b600080516020612813833981519152811461122f5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161034a565b506104538383836117cf565b600054610100900460ff166112625760405162461bcd60e51b815260040161034a9061237f565b61090d6117f4565b600054610100900460ff166112915760405162461bcd60e51b815260040161034a9061237f565b61090d611824565b6112a2826109bd565b60fc80546001600160a01b0319166001600160a01b0383161790556040516112c990611b0f565b604051809103906000f0801580156112e5573d6000803e3d6000fd5b5060fb80546001600160a01b0319166001600160a01b0392909216919091179055604080518082018252601e81527f6578656375746528616464726573732c75696e743235362c627974657329000060209182015260fe805463ffffffff191663b61d27f61790558151606081019092526029808352906127ea908301398051906020012060fe60046101000a81548163ffffffff021916908360e01c02179055505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006113e88261184b565b805190602001209050919050565b600080611406836004818761206e565b81019061141391906123ca565b509095945050505050565b6060600061142f836004818761206e565b81019061141391906124a1565b36600061144c6040840184611f50565b909250905060148110156114955760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420696e6974436f646560801b604482015260640161034a565b60006114a4601482848661206e565b6114ad91612572565b60601c9050803b6114f25760405162461bcd60e51b815260206004820152600f60248201526e696e76616c696420666163746f727960881b604482015260640161034a565b60fb54604051632b870d1b60e11b81526000916001600160a01b03169063570e1a369061152590879087906004016125a5565b6020604051808303816000875af1158015611544573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156891906125b9565b90506001600160a01b0381166115c05760405162461bcd60e51b815260206004820152601d60248201527f6163636f756e7420696e697469616c697a6174696f6e206661696c6564000000604482015260640161034a565b803b610ebf5760405162461bcd60e51b815260206004820152601e60248201527f696e76616c6964206163636f756e7420696e697469616c697a6174696f6e0000604482015260640161034a565b60003681611620610120850185611f50565b909250905060148110156116765760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207061796d6173746572416e64446174610000000000000000604482015260640161034a565b6000611685601482848661206e565b61168e91612572565b60601c9050803b6116da5760405162461bcd60e51b81526020600482015260166024820152751c185e5b585cdd195c881b9bdd0819195c1b1bde595960521b604482015260640161034a565b60fc546001600160a01b0382811691161461172b5760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b2103830bcb6b0b9ba32b960791b604482015260640161034a565b949350505050565b6001600160a01b0381163b6117a05760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161034a565b60008051602061281383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6117d88361191e565b6000825111806117e55750805b1561045357611057838361195e565b600054610100900460ff1661181b5760405162461bcd60e51b815260040161034a9061237f565b61090d3361138b565b600054610100900460ff166110ca5760405162461bcd60e51b815260040161034a9061237f565b606081356020830135600061186b6118666040870187611f50565b611983565b9050600061187f6118666060880188611f50565b9050608086013560a087013560c088013560e08901356101008a013560006118ae6118666101208e018e611f50565b604080516001600160a01b039c909c1660208d01528b81019a909a5260608b019890985250608089019590955260a088019390935260c087019190915260e08601526101008501526101208401526101408084019190915281518084039091018152610160909201905292915050565b61192781611733565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061050a838360405180606001604052806027815260200161283360279139611996565b6000604051828085833790209392505050565b6060600080856001600160a01b0316856040516119b3919061236d565b600060405180830381855af49150503d80600081146119ee576040519150601f19603f3d011682016040523d82523d6000602084013e6119f3565b606091505b5091509150611a0486838387611a0e565b9695505050505050565b60608315611a7d578251600003611a76576001600160a01b0385163b611a765760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161034a565b508161172b565b61172b8383815115611a925781518083602001fd5b8060405162461bcd60e51b815260040161034a919061233a565b828054828255906000526020600020908101928215611aff579160200282015b82811115611aff5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611acc565b50611b0b929150611b1c565b5090565b610213806125d783390190565b5b80821115611b0b5760008155600101611b1d565b80356001600160c01b0381168114611b4857600080fd5b919050565b600060208284031215611b5f57600080fd5b61050a82611b31565b60008083601f840112611b7a57600080fd5b5081356001600160401b03811115611b9157600080fd5b6020830191508360208260051b8501011115611bac57600080fd5b9250929050565b6001600160a01b03811681146102ec57600080fd5b600080600060408486031215611bdd57600080fd5b83356001600160401b03811115611bf357600080fd5b611bff86828701611b68565b9094509250506020840135611c1381611bb3565b809150509250925092565b60008060208385031215611c3157600080fd5b82356001600160401b03811115611c4757600080fd5b611c5385828601611b68565b90969095509350505050565b8035611b4881611bb3565b60008060408385031215611c7d57600080fd5b8235611c8881611bb3565b9150611c9660208401611b31565b90509250929050565b600060208284031215611cb157600080fd5b813561050a81611bb3565b60008060408385031215611ccf57600080fd5b8235611cda81611bb3565b91506020830135611cea81611bb3565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611d3357611d33611cf5565b604052919050565b60006001600160401b03821115611d5457611d54611cf5565b50601f01601f191660200190565b600082601f830112611d7357600080fd5b8135611d86611d8182611d3b565b611d0b565b818152846020838601011115611d9b57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611dcb57600080fd5b8235611dd681611bb3565b915060208301356001600160401b03811115611df157600080fd5b611dfd85828601611d62565b9150509250929050565b60006001600160401b03821115611e2057611e20611cf5565b5060051b60200190565b600082601f830112611e3b57600080fd5b81356020611e4b611d8183611e07565b82815260059290921b84018101918181019086841115611e6a57600080fd5b8286015b84811015611e8e578035611e8181611bb3565b8352918301918301611e6e565b509695505050505050565b60008060408385031215611eac57600080fd5b8235611eb781611bb3565b915060208301356001600160401b03811115611ed257600080fd5b611dfd85828601611e2a565b600060208284031215611ef057600080fd5b81356001600160401b03811115611f0657600080fd5b8201610160818503121561050a57600080fd5b634e487b7160e01b600052603260045260246000fd5b6000823561015e19833603018112611f4657600080fd5b9190910192915050565b6000808335601e19843603018112611f6757600080fd5b8301803591506001600160401b03821115611f8157600080fd5b602001915036819003821315611bac57600080fd5b600060208284031215611fa857600080fd5b5051919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006001820161206757634e487b7160e01b600052601160045260246000fd5b5060010190565b6000808585111561207e57600080fd5b8386111561208b57600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156120c05780818660040360031b1b83161692505b505092915050565b6000808335601e198436030181126120df57600080fd5b83016020810192503590506001600160401b038111156120fe57600080fd5b803603821315611bac57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101606121558461214885611c5f565b6001600160a01b03169052565b6020830135602085015261216c60408401846120c8565b82604087015261217f838701828461210d565b9250505061219060608401846120c8565b85830360608701526121a383828461210d565b925050506080830135608085015260a083013560a085015260c083013560c085015260e083013560e08501526101008084013581860152506101206121ea818501856120c8565b868403838801526121fc84828461210d565b9350505050610140612210818501856120c8565b8684038388015261222284828461210d565b979650505050505050565b6040815260006122406040830185612136565b90508260208301529392505050565b60006020828403121561226157600080fd5b8151801515811461050a57600080fd5b6060815260006122846060830186612136565b60208301949094525060400152919050565b60005b838110156122b1578181015183820152602001612299565b50506000910152565b600080604083850312156122cd57600080fd5b82516001600160401b038111156122e357600080fd5b8301601f810185136122f457600080fd5b8051612302611d8182611d3b565b81815286602083850101111561231757600080fd5b612328826020830160208601612296565b60209590950151949694955050505050565b6020815260008251806020840152612359816040850160208701612296565b601f01601f19169190910160400192915050565b60008251611f46818460208701612296565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000806000606084860312156123df57600080fd5b83356123ea81611bb3565b92506020840135915060408401356001600160401b0381111561240c57600080fd5b61241886828701611d62565b9150509250925092565b600082601f83011261243357600080fd5b81356020612443611d8183611e07565b82815260059290921b8401810191818101908684111561246257600080fd5b8286015b84811015611e8e5780356001600160401b038111156124855760008081fd5b6124938986838b0101611d62565b845250918301918301612466565b6000806000606084860312156124b657600080fd5b83356001600160401b03808211156124cd57600080fd5b6124d987838801611e2a565b94506020915081860135818111156124f057600080fd5b8601601f8101881361250157600080fd5b803561250f611d8182611e07565b81815260059190911b8201840190848101908a83111561252e57600080fd5b928501925b8284101561254c57833582529285019290850190612533565b9650505050604086013591508082111561256557600080fd5b5061241886828701612422565b6bffffffffffffffffffffffff1981358181169160148510156120c05760149490940360031b84901b1690921692915050565b60208152600061172b60208301848661210d565b6000602082840312156125cb57600080fd5b815161050a81611bb356fe608060405234801561001057600080fd5b506101f3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063570e1a3614610030575b600080fd5b61004361003e3660046100ec565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60008061006f601482858761015e565b61007891610188565b60601c9050600061008c846014818861015e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525084519495509360209350849250905082850182875af190506000519350806100e357600093505b50505092915050565b600080602083850312156100ff57600080fd5b823567ffffffffffffffff8082111561011757600080fd5b818501915085601f83011261012b57600080fd5b81358181111561013a57600080fd5b86602082850101111561014c57600080fd5b60209290920196919550909350505050565b6000808585111561016e57600080fd5b8386111561017b57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156101b55780818660140360031b1b83161692505b50509291505056fea2646970667358221220ae47150d632594656fe259a0b1e27c8172db3a89a4ab59072d0ae47d8b421b2264736f6c6343000814003365786563757465426174636828616464726573735b5d2c75696e743235365b5d2c62797465735b5d29360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205d228096fd15585fb514ec698424dcea17fd4af8ead3cc9da424cf5cea761a8064736f6c63430008140033",
}

// TokenEntryPointABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenEntryPointMetaData.ABI instead.
var TokenEntryPointABI = TokenEntryPointMetaData.ABI

// TokenEntryPointBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenEntryPointMetaData.Bin instead.
var TokenEntryPointBin = TokenEntryPointMetaData.Bin

// DeployTokenEntryPoint deploys a new Ethereum contract, binding an instance of TokenEntryPoint to it.
func DeployTokenEntryPoint(auth *bind.TransactOpts, backend bind.ContractBackend, anEntryPoint common.Address) (common.Address, *types.Transaction, *TokenEntryPoint, error) {
	parsed, err := TokenEntryPointMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenEntryPointBin), backend, anEntryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenEntryPoint{TokenEntryPointCaller: TokenEntryPointCaller{contract: contract}, TokenEntryPointTransactor: TokenEntryPointTransactor{contract: contract}, TokenEntryPointFilterer: TokenEntryPointFilterer{contract: contract}}, nil
}

// TokenEntryPoint is an auto generated Go binding around an Ethereum contract.
type TokenEntryPoint struct {
	TokenEntryPointCaller     // Read-only binding to the contract
	TokenEntryPointTransactor // Write-only binding to the contract
	TokenEntryPointFilterer   // Log filterer for contract events
}

// TokenEntryPointCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenEntryPointCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenEntryPointTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenEntryPointTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenEntryPointFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenEntryPointFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenEntryPointSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenEntryPointSession struct {
	Contract     *TokenEntryPoint  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenEntryPointCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenEntryPointCallerSession struct {
	Contract *TokenEntryPointCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// TokenEntryPointTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenEntryPointTransactorSession struct {
	Contract     *TokenEntryPointTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TokenEntryPointRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenEntryPointRaw struct {
	Contract *TokenEntryPoint // Generic contract binding to access the raw methods on
}

// TokenEntryPointCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenEntryPointCallerRaw struct {
	Contract *TokenEntryPointCaller // Generic read-only contract binding to access the raw methods on
}

// TokenEntryPointTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenEntryPointTransactorRaw struct {
	Contract *TokenEntryPointTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenEntryPoint creates a new instance of TokenEntryPoint, bound to a specific deployed contract.
func NewTokenEntryPoint(address common.Address, backend bind.ContractBackend) (*TokenEntryPoint, error) {
	contract, err := bindTokenEntryPoint(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPoint{TokenEntryPointCaller: TokenEntryPointCaller{contract: contract}, TokenEntryPointTransactor: TokenEntryPointTransactor{contract: contract}, TokenEntryPointFilterer: TokenEntryPointFilterer{contract: contract}}, nil
}

// NewTokenEntryPointCaller creates a new read-only instance of TokenEntryPoint, bound to a specific deployed contract.
func NewTokenEntryPointCaller(address common.Address, caller bind.ContractCaller) (*TokenEntryPointCaller, error) {
	contract, err := bindTokenEntryPoint(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointCaller{contract: contract}, nil
}

// NewTokenEntryPointTransactor creates a new write-only instance of TokenEntryPoint, bound to a specific deployed contract.
func NewTokenEntryPointTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenEntryPointTransactor, error) {
	contract, err := bindTokenEntryPoint(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointTransactor{contract: contract}, nil
}

// NewTokenEntryPointFilterer creates a new log filterer instance of TokenEntryPoint, bound to a specific deployed contract.
func NewTokenEntryPointFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenEntryPointFilterer, error) {
	contract, err := bindTokenEntryPoint(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointFilterer{contract: contract}, nil
}

// bindTokenEntryPoint binds a generic wrapper to an already deployed contract.
func bindTokenEntryPoint(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TokenEntryPointMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenEntryPoint *TokenEntryPointRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenEntryPoint.Contract.TokenEntryPointCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenEntryPoint *TokenEntryPointRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.TokenEntryPointTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenEntryPoint *TokenEntryPointRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.TokenEntryPointTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenEntryPoint *TokenEntryPointCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenEntryPoint.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenEntryPoint *TokenEntryPointTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenEntryPoint *TokenEntryPointTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.contract.Transact(opts, method, params...)
}

// IsAddressInList is a free data retrieval call binding the contract method 0x70dc3611.
//
// Solidity: function _isAddressInList(address addr, address[] list) pure returns(bool)
func (_TokenEntryPoint *TokenEntryPointCaller) IsAddressInList(opts *bind.CallOpts, addr common.Address, list []common.Address) (bool, error) {
	var out []interface{}
	err := _TokenEntryPoint.contract.Call(opts, &out, "_isAddressInList", addr, list)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAddressInList is a free data retrieval call binding the contract method 0x70dc3611.
//
// Solidity: function _isAddressInList(address addr, address[] list) pure returns(bool)
func (_TokenEntryPoint *TokenEntryPointSession) IsAddressInList(addr common.Address, list []common.Address) (bool, error) {
	return _TokenEntryPoint.Contract.IsAddressInList(&_TokenEntryPoint.CallOpts, addr, list)
}

// IsAddressInList is a free data retrieval call binding the contract method 0x70dc3611.
//
// Solidity: function _isAddressInList(address addr, address[] list) pure returns(bool)
func (_TokenEntryPoint *TokenEntryPointCallerSession) IsAddressInList(addr common.Address, list []common.Address) (bool, error) {
	return _TokenEntryPoint.Contract.IsAddressInList(&_TokenEntryPoint.CallOpts, addr, list)
}

// GetNonce is a free data retrieval call binding the contract method 0x35567e1a.
//
// Solidity: function getNonce(address sender, uint192 key) view returns(uint256 nonce)
func (_TokenEntryPoint *TokenEntryPointCaller) GetNonce(opts *bind.CallOpts, sender common.Address, key *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TokenEntryPoint.contract.Call(opts, &out, "getNonce", sender, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x35567e1a.
//
// Solidity: function getNonce(address sender, uint192 key) view returns(uint256 nonce)
func (_TokenEntryPoint *TokenEntryPointSession) GetNonce(sender common.Address, key *big.Int) (*big.Int, error) {
	return _TokenEntryPoint.Contract.GetNonce(&_TokenEntryPoint.CallOpts, sender, key)
}

// GetNonce is a free data retrieval call binding the contract method 0x35567e1a.
//
// Solidity: function getNonce(address sender, uint192 key) view returns(uint256 nonce)
func (_TokenEntryPoint *TokenEntryPointCallerSession) GetNonce(sender common.Address, key *big.Int) (*big.Int, error) {
	return _TokenEntryPoint.Contract.GetNonce(&_TokenEntryPoint.CallOpts, sender, key)
}

// GetUserOpHash is a free data retrieval call binding the contract method 0xa6193531.
//
// Solidity: function getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes) userOp) view returns(bytes32)
func (_TokenEntryPoint *TokenEntryPointCaller) GetUserOpHash(opts *bind.CallOpts, userOp UserOperation) ([32]byte, error) {
	var out []interface{}
	err := _TokenEntryPoint.contract.Call(opts, &out, "getUserOpHash", userOp)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetUserOpHash is a free data retrieval call binding the contract method 0xa6193531.
//
// Solidity: function getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes) userOp) view returns(bytes32)
func (_TokenEntryPoint *TokenEntryPointSession) GetUserOpHash(userOp UserOperation) ([32]byte, error) {
	return _TokenEntryPoint.Contract.GetUserOpHash(&_TokenEntryPoint.CallOpts, userOp)
}

// GetUserOpHash is a free data retrieval call binding the contract method 0xa6193531.
//
// Solidity: function getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes) userOp) view returns(bytes32)
func (_TokenEntryPoint *TokenEntryPointCallerSession) GetUserOpHash(userOp UserOperation) ([32]byte, error) {
	return _TokenEntryPoint.Contract.GetUserOpHash(&_TokenEntryPoint.CallOpts, userOp)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenEntryPoint *TokenEntryPointCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenEntryPoint.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenEntryPoint *TokenEntryPointSession) Owner() (common.Address, error) {
	return _TokenEntryPoint.Contract.Owner(&_TokenEntryPoint.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenEntryPoint *TokenEntryPointCallerSession) Owner() (common.Address, error) {
	return _TokenEntryPoint.Contract.Owner(&_TokenEntryPoint.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_TokenEntryPoint *TokenEntryPointCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TokenEntryPoint.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_TokenEntryPoint *TokenEntryPointSession) ProxiableUUID() ([32]byte, error) {
	return _TokenEntryPoint.Contract.ProxiableUUID(&_TokenEntryPoint.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_TokenEntryPoint *TokenEntryPointCallerSession) ProxiableUUID() ([32]byte, error) {
	return _TokenEntryPoint.Contract.ProxiableUUID(&_TokenEntryPoint.CallOpts)
}

// SenderNonce is a free data retrieval call binding the contract method 0x9c90b443.
//
// Solidity: function senderNonce(address ) view returns(uint256)
func (_TokenEntryPoint *TokenEntryPointCaller) SenderNonce(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TokenEntryPoint.contract.Call(opts, &out, "senderNonce", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SenderNonce is a free data retrieval call binding the contract method 0x9c90b443.
//
// Solidity: function senderNonce(address ) view returns(uint256)
func (_TokenEntryPoint *TokenEntryPointSession) SenderNonce(arg0 common.Address) (*big.Int, error) {
	return _TokenEntryPoint.Contract.SenderNonce(&_TokenEntryPoint.CallOpts, arg0)
}

// SenderNonce is a free data retrieval call binding the contract method 0x9c90b443.
//
// Solidity: function senderNonce(address ) view returns(uint256)
func (_TokenEntryPoint *TokenEntryPointCallerSession) SenderNonce(arg0 common.Address) (*big.Int, error) {
	return _TokenEntryPoint.Contract.SenderNonce(&_TokenEntryPoint.CallOpts, arg0)
}

// HandleOps is a paid mutator transaction binding the contract method 0x1fad948c.
//
// Solidity: function handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[] ops, address beneficiary) returns()
func (_TokenEntryPoint *TokenEntryPointTransactor) HandleOps(opts *bind.TransactOpts, ops []UserOperation, beneficiary common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.contract.Transact(opts, "handleOps", ops, beneficiary)
}

// HandleOps is a paid mutator transaction binding the contract method 0x1fad948c.
//
// Solidity: function handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[] ops, address beneficiary) returns()
func (_TokenEntryPoint *TokenEntryPointSession) HandleOps(ops []UserOperation, beneficiary common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.HandleOps(&_TokenEntryPoint.TransactOpts, ops, beneficiary)
}

// HandleOps is a paid mutator transaction binding the contract method 0x1fad948c.
//
// Solidity: function handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[] ops, address beneficiary) returns()
func (_TokenEntryPoint *TokenEntryPointTransactorSession) HandleOps(ops []UserOperation, beneficiary common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.HandleOps(&_TokenEntryPoint.TransactOpts, ops, beneficiary)
}

// IncrementNonce is a paid mutator transaction binding the contract method 0x0bd28e3b.
//
// Solidity: function incrementNonce(uint192 key) returns()
func (_TokenEntryPoint *TokenEntryPointTransactor) IncrementNonce(opts *bind.TransactOpts, key *big.Int) (*types.Transaction, error) {
	return _TokenEntryPoint.contract.Transact(opts, "incrementNonce", key)
}

// IncrementNonce is a paid mutator transaction binding the contract method 0x0bd28e3b.
//
// Solidity: function incrementNonce(uint192 key) returns()
func (_TokenEntryPoint *TokenEntryPointSession) IncrementNonce(key *big.Int) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.IncrementNonce(&_TokenEntryPoint.TransactOpts, key)
}

// IncrementNonce is a paid mutator transaction binding the contract method 0x0bd28e3b.
//
// Solidity: function incrementNonce(uint192 key) returns()
func (_TokenEntryPoint *TokenEntryPointTransactorSession) IncrementNonce(key *big.Int) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.IncrementNonce(&_TokenEntryPoint.TransactOpts, key)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address anOwner, address aPaymaster) returns()
func (_TokenEntryPoint *TokenEntryPointTransactor) Initialize(opts *bind.TransactOpts, anOwner common.Address, aPaymaster common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.contract.Transact(opts, "initialize", anOwner, aPaymaster)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address anOwner, address aPaymaster) returns()
func (_TokenEntryPoint *TokenEntryPointSession) Initialize(anOwner common.Address, aPaymaster common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.Initialize(&_TokenEntryPoint.TransactOpts, anOwner, aPaymaster)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address anOwner, address aPaymaster) returns()
func (_TokenEntryPoint *TokenEntryPointTransactorSession) Initialize(anOwner common.Address, aPaymaster common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.Initialize(&_TokenEntryPoint.TransactOpts, anOwner, aPaymaster)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenEntryPoint *TokenEntryPointTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenEntryPoint.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenEntryPoint *TokenEntryPointSession) RenounceOwnership() (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.RenounceOwnership(&_TokenEntryPoint.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenEntryPoint *TokenEntryPointTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.RenounceOwnership(&_TokenEntryPoint.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenEntryPoint *TokenEntryPointTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenEntryPoint *TokenEntryPointSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.TransferOwnership(&_TokenEntryPoint.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenEntryPoint *TokenEntryPointTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.TransferOwnership(&_TokenEntryPoint.TransactOpts, newOwner)
}

// UpdatePaymaster is a paid mutator transaction binding the contract method 0xdaf6a3f6.
//
// Solidity: function updatePaymaster(address newPaymaster) returns()
func (_TokenEntryPoint *TokenEntryPointTransactor) UpdatePaymaster(opts *bind.TransactOpts, newPaymaster common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.contract.Transact(opts, "updatePaymaster", newPaymaster)
}

// UpdatePaymaster is a paid mutator transaction binding the contract method 0xdaf6a3f6.
//
// Solidity: function updatePaymaster(address newPaymaster) returns()
func (_TokenEntryPoint *TokenEntryPointSession) UpdatePaymaster(newPaymaster common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.UpdatePaymaster(&_TokenEntryPoint.TransactOpts, newPaymaster)
}

// UpdatePaymaster is a paid mutator transaction binding the contract method 0xdaf6a3f6.
//
// Solidity: function updatePaymaster(address newPaymaster) returns()
func (_TokenEntryPoint *TokenEntryPointTransactorSession) UpdatePaymaster(newPaymaster common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.UpdatePaymaster(&_TokenEntryPoint.TransactOpts, newPaymaster)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0x35377214.
//
// Solidity: function updateWhitelist(address[] addr) returns()
func (_TokenEntryPoint *TokenEntryPointTransactor) UpdateWhitelist(opts *bind.TransactOpts, addr []common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.contract.Transact(opts, "updateWhitelist", addr)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0x35377214.
//
// Solidity: function updateWhitelist(address[] addr) returns()
func (_TokenEntryPoint *TokenEntryPointSession) UpdateWhitelist(addr []common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.UpdateWhitelist(&_TokenEntryPoint.TransactOpts, addr)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0x35377214.
//
// Solidity: function updateWhitelist(address[] addr) returns()
func (_TokenEntryPoint *TokenEntryPointTransactorSession) UpdateWhitelist(addr []common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.UpdateWhitelist(&_TokenEntryPoint.TransactOpts, addr)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_TokenEntryPoint *TokenEntryPointTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_TokenEntryPoint *TokenEntryPointSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.UpgradeTo(&_TokenEntryPoint.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_TokenEntryPoint *TokenEntryPointTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.UpgradeTo(&_TokenEntryPoint.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_TokenEntryPoint *TokenEntryPointTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _TokenEntryPoint.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_TokenEntryPoint *TokenEntryPointSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.UpgradeToAndCall(&_TokenEntryPoint.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_TokenEntryPoint *TokenEntryPointTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _TokenEntryPoint.Contract.UpgradeToAndCall(&_TokenEntryPoint.TransactOpts, newImplementation, data)
}

// TokenEntryPointAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the TokenEntryPoint contract.
type TokenEntryPointAdminChangedIterator struct {
	Event *TokenEntryPointAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenEntryPointAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenEntryPointAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenEntryPointAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenEntryPointAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenEntryPointAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenEntryPointAdminChanged represents a AdminChanged event raised by the TokenEntryPoint contract.
type TokenEntryPointAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_TokenEntryPoint *TokenEntryPointFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*TokenEntryPointAdminChangedIterator, error) {

	logs, sub, err := _TokenEntryPoint.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointAdminChangedIterator{contract: _TokenEntryPoint.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_TokenEntryPoint *TokenEntryPointFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *TokenEntryPointAdminChanged) (event.Subscription, error) {

	logs, sub, err := _TokenEntryPoint.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenEntryPointAdminChanged)
				if err := _TokenEntryPoint.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_TokenEntryPoint *TokenEntryPointFilterer) ParseAdminChanged(log types.Log) (*TokenEntryPointAdminChanged, error) {
	event := new(TokenEntryPointAdminChanged)
	if err := _TokenEntryPoint.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenEntryPointBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the TokenEntryPoint contract.
type TokenEntryPointBeaconUpgradedIterator struct {
	Event *TokenEntryPointBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenEntryPointBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenEntryPointBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenEntryPointBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenEntryPointBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenEntryPointBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenEntryPointBeaconUpgraded represents a BeaconUpgraded event raised by the TokenEntryPoint contract.
type TokenEntryPointBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_TokenEntryPoint *TokenEntryPointFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*TokenEntryPointBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _TokenEntryPoint.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointBeaconUpgradedIterator{contract: _TokenEntryPoint.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_TokenEntryPoint *TokenEntryPointFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *TokenEntryPointBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _TokenEntryPoint.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenEntryPointBeaconUpgraded)
				if err := _TokenEntryPoint.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_TokenEntryPoint *TokenEntryPointFilterer) ParseBeaconUpgraded(log types.Log) (*TokenEntryPointBeaconUpgraded, error) {
	event := new(TokenEntryPointBeaconUpgraded)
	if err := _TokenEntryPoint.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenEntryPointInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the TokenEntryPoint contract.
type TokenEntryPointInitializedIterator struct {
	Event *TokenEntryPointInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenEntryPointInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenEntryPointInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenEntryPointInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenEntryPointInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenEntryPointInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenEntryPointInitialized represents a Initialized event raised by the TokenEntryPoint contract.
type TokenEntryPointInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TokenEntryPoint *TokenEntryPointFilterer) FilterInitialized(opts *bind.FilterOpts) (*TokenEntryPointInitializedIterator, error) {

	logs, sub, err := _TokenEntryPoint.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointInitializedIterator{contract: _TokenEntryPoint.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TokenEntryPoint *TokenEntryPointFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TokenEntryPointInitialized) (event.Subscription, error) {

	logs, sub, err := _TokenEntryPoint.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenEntryPointInitialized)
				if err := _TokenEntryPoint.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TokenEntryPoint *TokenEntryPointFilterer) ParseInitialized(log types.Log) (*TokenEntryPointInitialized, error) {
	event := new(TokenEntryPointInitialized)
	if err := _TokenEntryPoint.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenEntryPointOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TokenEntryPoint contract.
type TokenEntryPointOwnershipTransferredIterator struct {
	Event *TokenEntryPointOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenEntryPointOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenEntryPointOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenEntryPointOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenEntryPointOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenEntryPointOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenEntryPointOwnershipTransferred represents a OwnershipTransferred event raised by the TokenEntryPoint contract.
type TokenEntryPointOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenEntryPoint *TokenEntryPointFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TokenEntryPointOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenEntryPoint.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointOwnershipTransferredIterator{contract: _TokenEntryPoint.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenEntryPoint *TokenEntryPointFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TokenEntryPointOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenEntryPoint.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenEntryPointOwnershipTransferred)
				if err := _TokenEntryPoint.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenEntryPoint *TokenEntryPointFilterer) ParseOwnershipTransferred(log types.Log) (*TokenEntryPointOwnershipTransferred, error) {
	event := new(TokenEntryPointOwnershipTransferred)
	if err := _TokenEntryPoint.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenEntryPointUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the TokenEntryPoint contract.
type TokenEntryPointUpgradedIterator struct {
	Event *TokenEntryPointUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenEntryPointUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenEntryPointUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenEntryPointUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenEntryPointUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenEntryPointUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenEntryPointUpgraded represents a Upgraded event raised by the TokenEntryPoint contract.
type TokenEntryPointUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_TokenEntryPoint *TokenEntryPointFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*TokenEntryPointUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _TokenEntryPoint.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointUpgradedIterator{contract: _TokenEntryPoint.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_TokenEntryPoint *TokenEntryPointFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *TokenEntryPointUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _TokenEntryPoint.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenEntryPointUpgraded)
				if err := _TokenEntryPoint.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_TokenEntryPoint *TokenEntryPointFilterer) ParseUpgraded(log types.Log) (*TokenEntryPointUpgraded, error) {
	event := new(TokenEntryPointUpgraded)
	if err := _TokenEntryPoint.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
