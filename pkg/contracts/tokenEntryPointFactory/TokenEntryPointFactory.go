// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tokenEntryPointFactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TokenEntryPointFactoryMetaData contains all meta data concerning the TokenEntryPointFactory contract.
var TokenEntryPointFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenEntryPoint\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"}],\"name\":\"EntryPointCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelistedAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contractTokenEntryPoint\",\"name\":\"tokenEntryPoint\",\"type\":\"address\"},{\"internalType\":\"contractPaymaster\",\"name\":\"paymaster\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelistedAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymasterImplementation\",\"outputs\":[{\"internalType\":\"contractPaymaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenEntryPointImplementation\",\"outputs\":[{\"internalType\":\"contractTokenEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e03461013957601f614bed38819003918201601f19168301926001600160401b039290918385118386101761012357816020928492604097885283398101031261013957516001600160a01b038116919082900361013957816080528251612799928382019382851084861117610123576124548339835260208160009403019083f080156101195760a05282519061157b8083019182118383101761010557908291610ed98339039082f09081156100fa575060c05251610d9a908161013f8239608051816071015260a051818181610148015281816105c4015261089f015260c051818181610103015281816104f701526107bb0152f35b8251903d90823e3d90fd5b634e487b7160e01b84526041600452602484fd5b83513d84823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe60406080815260043610156200001457600080fd5b600090813560e01c8063296c2efa14620001775780634f8a633d14620001325780638e3484d014620000ed5780639ee01b5f14620000a45763b0d691fe146200005c57600080fd5b34620000a05781600319360112620000a057517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b5034620000a057620000e990620000c9620000bf366200020a565b92919091620006cf565b91516001600160a01b039182168152911660208201529081906040820190565b0390f35b5034620000a05781600319360112620000a057517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034620000a05781600319360112620000a057517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b509034620001b15750620001996200018f366200020a565b92919091620003fd565b82516001600160a01b03928316815291166020820152f35b80fd5b6060810190811067ffffffffffffffff821117620001d157604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117620001d157604052565b906080600319830112620002cb576001600160a01b03906004358281168103620002cb57926024358381168103620002cb57926044359167ffffffffffffffff91828411620002cb5781602385011215620002cb578360040135928311620001d1578260051b604051946020946200028586840188620001e7565b8652602485870192820101938411620002cb57602401905b838210620002b15750505050509060643590565b81358381168103620002cb5781529084019084016200029d565b600080fd5b15620002d857565b60405162461bcd60e51b815260206004820152601d60248201527f77686974656c697374656441646472657373657320697320656d7074790000006044820152606490fd5b8051156200032b5760200190565b634e487b7160e01b600052603260045260246000fd5b60005b838110620003555750506000910152565b818101518382015260200162000344565b909160609260018060a01b031682526040602083015262000397815180928160408601526020868601910162000341565b601f01601f1916010190565b916060830190608060018060a01b0394858095168152602094859316838201526060604082015286518094520194019160005b828110620003e657505050505090565b8351851686529481019492810192600101620003d6565b9193906200040e84868386620006cf565b600091803b151580620006c4575b620006ad5750506200043186511515620002d0565b6001600160a01b03918262000446886200031d565b51604080516bffffffffffffffffffffffff1960608a811b82166020840190815287821b831660348501529590941690931b9092166048830152605c8083019990995297815262000499607c82620001e7565b519020908387519163189acdbd60e31b602084015216602482015260248152620004c381620001b4565b8651906104168083019267ffffffffffffffff9281851084861117620006445790806200051e87936200094f97868985398b7f0000000000000000000000000000000000000000000000000000000000000000169062000366565b039087f58015620006a357861697883b156200069f57899a899a9998995163f2fde38b60e01b81528781602481838d88169e8f60048401525af1801562000695578c95949392918e9162000658575b5051633bd1279b60e11b602082015294620005a49286926200059592909160248501620003a3565b03601f198101855284620001e7565b8a519381850192831185841017620006445791849391620005eb938539877f0000000000000000000000000000000000000000000000000000000000000000169062000366565b039083f5908115620006395750945194166001600160a01b03818116865284166020860152937f6069261d1e7f168b985591572adeb94fd3356d970997086ab9946f4555ddaa5090604090a2565b8651903d90823e3d90fd5b634e487b7160e01b87526041600452602487fd5b809294965085979899939591501162000681578c529594938a93909290918c620005a46200056d565b634e487b7160e01b82526041600452602482fd5b8d513d8a823e3d90fd5b8580fd5b89513d87823e3d90fd5b6001600160a01b0390811697501694509192505050565b50813b15156200041c565b93929382511515620006e190620002d0565b6001600160a01b039283620006f6826200031d565b5116906040948551978860209485820192620007489189898692605c9492916bffffffffffffffffffffffff199283809260601b16865260601b16601485015260601b166028830152603c8201520190565b0398601f19998a810182526200075f9082620001e7565b5190209561041698848a01938a8351986200077b878b620001e7565b818a52876200094f9a818101938c85398787519363189acdbd60e31b8486015216602484015260248352620007b083620001b4565b86519283838101918a7f00000000000000000000000000000000000000000000000000000000000000001690620007e8918462000366565b038781018552620007fa9085620001e7565b8751938492848401968791518092620008139262000341565b830190519182858301620008279262000341565b010380835201620008399082620001e7565b51902062000848908a6200092e565b9a835195620008589087620001e7565b8086528686019889398251633bd1279b60e11b8782015296879162000883918d9060248501620003a3565b038181018752620008959087620001e7565b81518096868201947f00000000000000000000000000000000000000000000000000000000000000001690620008cc918662000366565b039081018652620008de9086620001e7565b51938492848401968791518092620008f69262000341565b8301905191828583016200090a9262000341565b0103808352016200091c9082620001e7565b5190206200092a916200092e565b9190565b605591600b9160405191604083015260208201523081520160ff8153209056fe604060808152610416908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160d190816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe608060405236156054577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f3fea2646970667358221220044b95600c5a8b16f58ad7053fc82847c6e00cbcad98e443169bf78d6395632364736f6c63430008140033a264697066735822122012e9a058e1ca72ad313df658162854b35c0de8973f5e37ceffe2ad185f1f2fd464736f6c6343000814003360a080604052346100dc57306080526000549060ff8260081c1661008a575060ff8082160361004f575b60405161149990816100e2823960805181818161058601528181610683015261092d0152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610029565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c80633659cfe6146109065780634f1ef2861461063357806352d1902d14610571578063715018a61461051457806377c93662146104eb5780638da5cb5b146104c257806394e1fc1914610458578063a9a23409146103ff578063c4d66de8146101e4578063c9a54e2b1461019c578063f2fde38b1461010b5763f465c77e146100a557600080fd5b3461010757600319906060368301126100ff5780359167ffffffffffffffff8311610103576101609083360301126100ff576100e19101610ddc565b82518381529283926100f591840190610bbd565b9060208301520390f35b8380fd5b8480fd5b8280fd5b503461010757602036600319011261010757610125610acc565b9161012e610fd2565b6001600160a01b0383161561014a57836101478461102a565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b83346101e15760203660031901126101e1576101b6610acc565b6101be610fd2565b60018060a01b03166bffffffffffffffffffffffff60a01b60c954161760c95580f35b80fd5b503461010757602090816003193601126100ff57610200610acc565b9084549160ff8360081c1615928380946103f2575b80156103db575b156103815760ff198116600117875583610370575b5061024b60ff875460081c1661024681610f72565b610f72565b6102543361102a565b60c954918551908682019082821067ffffffffffffffff83111761035d57508652601e81527f6578656375746528616464726573732c75696e743235362c6279746573290000908501528451916102aa83610b19565b60298084527f65786563757465426174636828616464726573735b5d2c75696e743235365b5d868501908152682c62797465735b5d2960b81b948801949094529092206001600160e01b03199092166001600160a01b039091161790831c63ffffffff60c01b1617635b0e93fb60a11b1760c955610326578280f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a138808280f35b634e487b7160e01b895260419052602488fd5b61ffff191661010117865538610231565b855162461bcd60e51b8152808401869052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561021c5750600160ff82161461021c565b50600160ff821610610215565b83823461045457606036600319011261045457600381351015610454576024359067ffffffffffffffff908183116100ff57366023840112156100ff5782013590811161010757369101602401116101e15780f35b5080fd5b5034610107576003196060368201126100ff5781359067ffffffffffffffff8211610103576101609082360301126100ff576024359165ffffffffffff9485841684036101e15760443595861686036101e1575091602094916104bb9301610c7c565b9051908152f35b50503461045457816003193601126104545760335490516001600160a01b039091168152602090f35b50503461045457816003193601126104545760c95490516001600160a01b039091168152602090f35b83346101e157806003193601126101e15761052d610fd2565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5082346101e157806003193601126101e157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036105cb57602082516000805160206114448339815191528152f35b6020608492519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b50908060031936011261010757610648610acc565b9060243567ffffffffffffffff81116101035736602382011215610103576106799036906024818701359101610b73565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169291906106b330851415611073565b6106d06000805160206114448339815191529482865416146110d4565b6106d8610fd2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561071057505050506101479150611316565b82516352d1902d60e01b81526020959394918416919086818981865afa8991816108d3575b5061079457855162461bcd60e51b8152808901889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b969192959493960361087e57506107aa85611316565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8680a2825115801590610876575b6107e5575b5050505080f35b6108629385808351956107f787610b19565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c86880152660819985a5b195960ca1b858801528581519101845af4913d1561086c573d61085461084b82610b57565b92519283610b35565b81528681943d92013e6113a6565b50388080806107de565b50606092506113a6565b5060016107d9565b825162461bcd60e51b8152908101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508781813d83116108ff575b6108eb8183610b35565b810103126108fb57519038610735565b8980fd5b503d6108e1565b509034610107576020806003193601126100ff57610922610acc565b916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811661095a30821415611073565b6109776000805160206114448339815191529183835416146110d4565b61097f610fd2565b82519161098b83610ae7565b8783527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156109c75750505050506101479150611316565b85939495169084516352d1902d60e01b815286818981865afa899181610a9d575b50610a4757855162461bcd60e51b8152808901889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b969192959493960361087e5750610a5d85611316565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8680a2825115801590610a96576107e5575050505080f35b50846107d9565b9091508781813d8311610ac5575b610ab58183610b35565b810103126108fb575190386109e8565b503d610aab565b600435906001600160a01b0382168203610ae257565b600080fd5b6020810190811067ffffffffffffffff821117610b0357604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff821117610b0357604052565b90601f8019910116810190811067ffffffffffffffff821117610b0357604052565b67ffffffffffffffff8111610b0357601f01601f191660200190565b929192610b7f82610b57565b91610b8d6040519384610b35565b829481845281830111610ae2578281602093846000960137010152565b359065ffffffffffff82168203610ae257565b919082519283825260005b848110610be9575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610bc8565b903590601e1981360301821215610ae2570180359067ffffffffffffffff8211610ae257602001918136038313610ae257565b15610c3757565b60405162461bcd60e51b815260206004820152601e60248201527f4141323720696e76616c69642066756e6374696f6e2073656c6563746f7200006044820152606490fd5b9160608301610c8b8185610bfd565b600492919211610ae2576001600160e01b03199135821690610cd590610cb2831515610c30565b610ccf60c95493858560401b168114908115610d81575b50610c30565b86610bfd565b600493919311610ae25760405192602060018060a01b03978881351682870152013560408501523516606083015260608252608082019382851067ffffffffffffffff861117610b0357610d7b938560405260a084019660c08852610d3e610160860186610bbd565b934660c08701523060e08701521661010085015265ffffffffffff8092166101208501521661014083015203609f1981018352607f190182610b35565b51902090565b9050858560201b161438610cc9565b15610d9757565b60405162461bcd60e51b815260206004820152601760248201527f414133322065787069726564206f72206e6f74206475650000000000000000006044820152606490fd5b90610deb610120830183610bfd565b9283605411610ae257610e0060148301610baa565b91610e0d60348201610baa565b946053190191604083148015610f68575b15610f23578584610e5292610e4d65ffffffffffff80421690610e45818716831015610d90565b841611610d90565b610c7c565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600052601c52610ead610ea5603c600020610e9f60018060a01b03948560c95416966054369201610b73565b9061124f565b919091611135565b1603610ee957604051610ebf81610ae7565b600081529260a09190911b65ffffffffffff60a01b1660d09190911b6001600160d01b0319161790565b600190604051610ef881610ae7565b600081529360a09190911b65ffffffffffff60a01b1660d09190911b6001600160d01b031916171790565b60405162461bcd60e51b815260206004820152601d60248201527f4141333520696e76616c6964207369676e6174757265206c656e6774680000006044820152606490fd5b5060418314610e1e565b15610f7957565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6033546001600160a01b03163303610fe657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b1561107a57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b156110db57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b600581101561123957806111465750565b600181036111935760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b600281036111e05760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b6003146111e957565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b634e487b7160e01b600052602160045260246000fd5b90604181511460001461127d57611279916020820151906060604084015193015160001a90611287565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831161130a5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa156112fd5781516001600160a01b038116156112f7579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b803b1561134b5760008051602061144483398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b9192901561140857508151156113ba575090565b3b156113c35790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561141b5750805190602001fd5b60405162461bcd60e51b81526020600482015290819061143f906024830190610bbd565b0390fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212200fd6da9b00c35d05fa40f96be6d38b506ab95bb6865ebaf0a2940d7299586cc064736f6c6343000814003360c0346200013757601f6200279938819003918201601f19168301916001600160401b038311848410176200013c578084926020946040528339810103126200013757516001600160a01b038116810362000137573060805260a05260005460ff8160081c16620000e25760ff80821603620000a6575b6040516126469081620001538239608051818181610489015281816106d201526107e7015260a05181610eb60152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a13862000076565b60405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c80630bd28e3b1461010757806316e4cbf9146101025780631b2e01b8146100fd5780631fad948c146100f857806335377214146100f357806335567e1a146100ee5780633659cfe6146100e95780634f1ef286146100e457806352d1902d146100df578063715018a6146100da57806377a24f36146100d55780638da5cb5b146100d0578063a6193531146100cb578063daf6a3f6146100c65763f2fde38b146100c157600080fd5b610b03565b610a7c565b610a3d565b610a14565b6108fa565b610899565b6107d4565b610691565b610462565b61042a565b61039e565b610225565b61019b565b610154565b610127565b602435906001600160c01b038216820361012257565b600080fd5b34610122576020366003190112610122576004356001600160c01b0381160361012257610152611fe1565b005b346101225760003660031901126101225760fc546040516001600160a01b039091168152602090f35b6001600160a01b0381160361012257565b35906101998261017d565b565b34610122576040366003190112610122576004356101b88161017d565b6101c061010c565b9060018060a01b031660005260fd60205260406000209060018060c01b03166000526020526020604060002054604051908152f35b9181601f84011215610122578235916001600160401b038311610122576020808501948460051b01011161012257565b34610122576040366003190112610122576004356001600160401b038111610122576102559036906004016101f5565b61026060243561017d565b6001916002835414610359576002835581156103055760005b8281106102895761015260018055565b806102ff61029986938686610f2e565b80356001600160a01b0316906102f9906102f2906102df60208201356001600160401b038116906102ce9060401c8785610f88565b6102d88684611a20565b8583611185565b6102e8816115d3565b6060810190610f56565b369161063c565b90611e6f565b01610279565b60405162461bcd60e51b815260206004820152602660248201527f41413432206e65656473206174206c65617374206f6e652075736572206f70656044820152653930ba34b7b760d11b6064820152608490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b3461012257602080600319360112610122576004356001600160401b038111610122576103cf9036906004016101f5565b906103d8611fe1565b60ff6103e481546119e7565b815560005b8381106103f257005b6104259082548160051b8501356104088161017d565b6001600160a01b03166000908152610100885260409020556119e7565b6103e9565b3461012257604036600319011261012257602061045a60043561044c8161017d565b61045461010c565b90610e7d565b604051908152f35b346101225760203660031901126101225760043561047f8161017d565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691906104b830841415612082565b6104d56000805160206125f18339815191529382855416146120e3565b6104dd611fe1565b604051906104ea826105e5565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156105245750506101529150612200565b6020600491604094939451928380926352d1902d60e01b825286165afa6000918161057f575b5061056c5760405162461bcd60e51b815280610568600482016121b1565b0390fd5b6101529361057a9114612153565b612290565b6105a191925060203d81116105a8575b6105998183610600565b810190612144565b903861054a565b503d61058f565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b038211176105e057604052565b6105af565b602081019081106001600160401b038211176105e057604052565b90601f801991011681019081106001600160401b038211176105e057604052565b6001600160401b0381116105e057601f01601f191660200190565b92919261064882610621565b916106566040519384610600565b829481845281830111610122578281602093846000960137010152565b9080601f830112156101225781602061068e9335910161063c565b90565b6040366003190112610122576004356106a98161017d565b6024356001600160401b038111610122576106c8903690600401610673565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692919061070230851415612082565b61071f6000805160206125f18339815191529482865416146120e3565b610727611fe1565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561075d5750506101529150612200565b6020600491604094939451928380926352d1902d60e01b825286165afa600091816107b4575b506107a15760405162461bcd60e51b815280610568600482016121b1565b610152936107af9114612153565b61234c565b6107cd91925060203d81116105a8576105998183610600565b9038610783565b34610122576000366003190112610122577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361082e576040516000805160206125f18339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b34610122576000806003193601126108f7576108b3611fe1565b606580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b34610122576060366003190112610122576004356109178161017d565b6024356109238161017d565b604435906001600160401b038211610122576109466109889236906004016101f5565b916000549461096c60ff8760081c161580978198610a06575b81156109e6575b50610b94565b8561097f600160ff196000541617600055565b6109cd57610bf7565b61098e57005b61099e61ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6109e161010061ff00196000541617600055565b610bf7565b303b159150816109f8575b5038610966565b6001915060ff1614386109f1565b600160ff821610915061095f565b34610122576000366003190112610122576065546040516001600160a01b039091168152602090f35b346101225760031960203682011261012257600435906001600160401b038211610122576101609082360301126101225761045a602091600401611dfd565b3461012257602036600319011261012257600435610a998161017d565b610aa1611fe1565b803b15610aca5760fc80546001600160a01b0319166001600160a01b0392909216919091179055005b60405162461bcd60e51b815260206004820152601160248201527034b73b30b634b2103830bcb6b0b9ba32b960791b6044820152606490fd5b3461012257602036600319011261012257600435610b208161017d565b610b28611fe1565b6001600160a01b03811615610b405761015290612039565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b15610b9b57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b9091610c8161019994610c1a60ff60005460081c16610c1581611f81565b611f81565b610c2333612039565b60005492610c6560ff8560081c16610c3a81611f81565b610c4381611f81565b610c4c81611f81565b600180551580958196610a065781156109e65750610b94565b83610c78600160ff196000541617600055565b610cc857611da4565b15610d8157610c9661ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1610d81565b610cdc61010061ff00196000541617600055565b611da4565b6040513d6000823e3d90fd5b60405190604082018281106001600160401b038211176105e057604052601e82527f6578656375746528616464726573732c75696e743235362c62797465732900006020830152565b60405190610d43826105c5565b60298252682c62797465735b5d2960b81b6040837f65786563757465426174636828616464726573735b5d2c75696e743235365b5d60208201520152565b90610d8a611fe1565b6001600160a01b03821615610b4057610da5610dc792612039565b60018060a01b03166bffffffffffffffffffffffff60a01b60fc54161760fc55565b6040516101948082018281106001600160401b038211176105e057829161245d833903906000f08015610e785760fb80546001600160a01b0319166001600160a01b03909216919091179055610e47610e34610e21610ced565b6020815191012063ffffffff60e01b1690565b60e01c63ffffffff1960fe54161760fe55565b610199610e55610e21610d36565b67ffffffff0000000060fe549160c01c169067ffffffff0000000019161760fe55565b610ce1565b604051631aab3f0d60e11b81526001600160a01b0391821660048201526001600160c01b039092166024830152602090829060449082907f0000000000000000000000000000000000000000000000000000000000000000165afa908115610e7857600091610eea575090565b906020823d8211610f10575b81610f0360209383610600565b810103126108f757505190565b3d9150610ef6565b634e487b7160e01b600052603260045260246000fd5b9190811015610f515760051b8101359061015e1981360301821215610122570190565b610f18565b903590601e198136030182121561012257018035906001600160401b0382116101225760200191813603831361012257565b91610f9590602092610e7d565b91013503610f9f57565b60405162461bcd60e51b815260206004820152601a60248201527f4141323520696e76616c6964206163636f756e74206e6f6e63650000000000006044820152606490fd5b90816020910312610122575180151581036101225790565b9035601e19823603018112156101225701602081359101916001600160401b03821161012257813603831361012257565b908060209392818452848401376000828201840152601f01601f1916010190565b61068e9161106c8161105f8461018e565b6001600160a01b03169052565b602082013560208201526111076110b861109d61108c6040860186610ffc565b61016080604088015286019161102d565b6110aa6060860186610ffc565b90858303606087015261102d565b6080840135608084015260a084013560a084015260c084013560c084015260e084013560e084015261010080850135908401526101206110fa81860186610ffc565b918584039086015261102d565b916111186101409182810190610ffc565b92909181850391015261102d565b92919061113d60209160408652604086019061104e565b930152565b1561114957565b60405162461bcd60e51b815260206004820152601460248201527320a0991a1039b4b3b730ba3ab9329032b93937b960611b6044820152606490fd5b916001600160401b03161580611325575b61121d575b816020916111ab6111ca94611dfd565b916000604051809681958294637ff9adb960e11b845260048401611126565b03926001600160a01b03165af18015610e7857610199916000916111ef575b50611142565b611210915060203d8111611216575b6112088183610600565b810190610fe4565b386111e9565b503d6111fe565b81602061123060406112a7950183610f56565b9061123e601483101561132e565b61126b61126661126061125a6112548686611372565b9061138e565b60601c90565b3b151590565b6113bf565b60fb54611288906001600160a01b03165b6001600160a01b031690565b906000604051809881958294632b870d1b60e11b84526004840161142f565b03925af1918215610e78576112ef6020936111ca956000916112f8575b506112e76001600160a01b03848116906112df821515611440565b83161461148c565b3b15156114d7565b9150915061119b565b6113189150853d811161131e575b6113108183610600565b81019061141a565b386112c4565b503d611306565b50803b15611196565b1561133557565b60405162461bcd60e51b81526020600482015260156024820152744141313720696e76616c696420696e6974436f646560581b6044820152606490fd5b906014116101225790601490565b906004116101225790600490565b6bffffffffffffffffffffffff1990358181169392601481106113b057505050565b60140360031b82901b16169150565b156113c657565b60405162461bcd60e51b815260206004820152602660248201527f4141313620696e76616c696420666163746f7279206f7220646f6573206e6f7460448201526508195e1a5cdd60d21b6064820152608490fd5b90816020910312610122575161068e8161017d565b91602061068e93818152019161102d565b1561144757565b60405162461bcd60e51b815260206004820152601b60248201527f4141313320696e6974436f6465206661696c6564206f72204f4f4700000000006044820152606490fd5b1561149357565b606460405162461bcd60e51b815260206004820152602060248201527f4141313420696e6974436f6465206d7573742072657475726e2073656e6465726044820152fd5b156114de57565b606460405162461bcd60e51b815260206004820152602060248201527f4141313520696e6974436f6465206d757374206372656174652073656e6465726044820152fd5b60005b8381106115355750506000910152565b8181015183820152602001611525565b91906040838203126101225782516001600160401b0381116101225783019080601f830112156101225781519161157b83610621565b916115896040519384610600565b83835260208483010111610122576020926115a991848085019101611522565b92015190565b6040906115c960009395949560608352606083019061104e565b9460208201520152565b600061160f916115e861127c61127c8361180c565b6115f182611e97565b9183604051809681958294637a32e3bf60e11b8452600484016115af565b03925af18015610e785761162b916000916116ca575b506116ed565b906001600160a01b031661168e5761163f57565b60405162461bcd60e51b815260206004820152602160248201527f41413332207061796d61737465722065787069726564206f72206e6f742064756044820152606560f81b6064820152608490fd5b60405162461bcd60e51b815260206004820152601460248201527320a0999a1039b4b3b730ba3ab9329032b93937b960611b6044820152606490fd5b6116e5913d8091833e6116dd8183610600565b810190611545565b905038611625565b80156117be57600060408051611702816105c5565b828152826020820152015265ffffffffffff90818160a01c169182156117b4575b506117969061177d6117726040519461173b866105c5565b6001600160a01b0384168652611760602087019460d01c859065ffffffffffff169052565b65ffffffffffff166040860181905290565b65ffffffffffff1690565b4211908115611799575b5091516001600160a01b031690565b91565b516117ac915065ffffffffffff16611772565b421038611787565b9150611796611723565b50600090600090565b156117ce57565b60405162461bcd60e51b815260206004820152601660248201527520a0999a9034b73b30b634b2103830bcb6b0b9ba32b960511b6044820152606490fd5b61181b90610120810190610f56565b6014811061189a57601411610122573560601c803b156118555760fc5461068e9061184e906001600160a01b031661127c565b82146117c7565b60405162461bcd60e51b815260206004820152601b60248201527f41413330207061796d6173746572206e6f74206465706c6f79656400000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f4141333620696e76616c6964207061796d6173746572206461746100000000006044820152606490fd5b156118e657565b60405162461bcd60e51b81526020600482015260156024820152744141323620696e76616c69642063616c6c6461746160581b6044820152606490fd5b6001600160e01b0319903581811693926004811061194057505050565b60040360031b82901b16169150565b1561195657565b60405162461bcd60e51b815260206004820152601e60248201527f4141323720696e76616c69642066756e6374696f6e2073656c6563746f7200006044820152606490fd5b156119a257565b60405162461bcd60e51b815260206004820152601d60248201527f4141323820636f6e7472616374206e6f742077686974656c69737465640000006044820152606490fd5b60001981146119f65760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015610f515760209160051b010190565b9190916060810190611a406004611a378484610f56565b905010156118df565b611a53611a4d8383610f56565b90611380565b6001600160e01b0319918291611a6891611923565b1690611a7582151561194f565b60fe54818160e01b168314808015611b75575b611a919061194f565b611b3e575b60c01b1614611aa6575b50509050565b611ab991611ab391610f56565b90611cd0565b60005b8151811015611b325780611b03611ae6611ad9611b089486611a0c565b516001600160a01b031690565b6001600160a01b0381811690881614908115611b0d575b5061199b565b6119e7565b611abc565b6001600160a01b03166000908152610100602052604090205460ff5414905038611afd565b50509050803880611aa0565b611b70611b54611b4e8787610f56565b90611b84565b6001600160a01b03818116908a1614908115611b0d575061199b565b611a96565b5060c082901b83168414611a88565b9080600411610122578101906060818303600319011261012257600481013591611bad8361017d565b6044820135916001600160401b03831161012257611bce9201600401610673565b506001600160a01b031690565b6001600160401b0381116105e05760051b60200190565b81601f8201121561012257803591611c0983611bdb565b92611c176040519485610600565b808452602092838086019260051b820101928311610122578301905b828210611c41575050505090565b81358152908301908301611c33565b9080601f8301121561012257813590611c6882611bdb565b92611c766040519485610600565b828452602092838086019160051b8301019280841161012257848301915b848310611ca45750505050505090565b82356001600160401b038111610122578691611cc584848094890101610673565b815201920191611c94565b908060041161012257810160608282036003190112610122576001600160401b039060048301358281116101225783019281602385011215610122576004840135611d1a81611bdb565b94611d286040519687610600565b81865260209160248388019160051b8301019185831161012257602401905b828210611d8b5750505050602481013583811161012257826004611d6d92840101611bf2565b50604481013592831161012257611d879201600401611c50565b5090565b8380918335611d998161017d565b815201910190611d47565b600060ff818155611db3611fe1565b60018155815b848110611dc7575050505050565b611df89082548160051b860135611ddd8161017d565b6001600160a01b0316855261010060205260408520556119e7565b611db9565b611e0690611e97565b6040516020810191825230604082015246606082015260608152608081018181106001600160401b038211176105e05760405251902090565b3d15611e6a573d90611e5082610621565b91611e5e6040519384610600565b82523d6000602084013e565b606090565b600091829182602083519301915af1611e86611e3f565b9015611e8f5750565b602081519101fd5b611ea46040820182610f56565b908160405191823720611f70611ebd6060840184610f56565b90816040519182372092611f62611ee1611edb610120840184610f56565b90611f76565b6040805184356001600160a01b031660208083019182528601359282019290925260608101969096526080808701979097529583013560a08087019190915283013560c08087019190915283013560e08087019190915283013561010080870191909152909201356101208501526101408401919091528290610160820190565b03601f198101835282610600565b51902090565b816040519182372090565b15611f8857565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6065546001600160a01b03163303611ff557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b606580546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b1561208957565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b156120ea57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b90816020910312610122575190565b1561215a57565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b803b15612235576000805160206125f183398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b9061229a82612200565b6001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2805115801590612344575b6122dc575050565b61234191600080604051936122f0856105c5565b602785527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020860152660819985a5b195960ca1b6040860152602081519101845af461233b611e3f565b916123eb565b50565b5060006122d4565b9061235682612200565b6001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2805115801590612397576122dc575050565b5060016122d4565b156123a657565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561240b57508151156123ff575090565b61068e903b151561239f565b82519091501561241e5750805190602001fd5b6044604051809262461bcd60e51b82526020600483015261244e8151809281602486015260208686019101611522565b601f01601f19168101030190fdfe6080806040523461001657610178908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c63570e1a361461002857600080fd5b3461009e57602036600319011261009e5760043567ffffffffffffffff9182821161009e573660238301121561009e57816004013592831161009e57366024848401011161009e5761009a61008084602485016100b7565b6040516001600160a01b0390911681529081906020820190565b0390f35b80fd5b634e487b7160e01b600052604160045260246000fd5b90806014116101385767ffffffffffffffff91601319820183811161013d5760405193600b8401601f19908116603f011685019081118582101761013d5760405280845260208401903684840111610138576020946000600c819682946014880187378301015251923560601c5af190600051911561013257565b60009150565b600080fd5b6100a156fea2646970667358221220751eda83228c38938c5753603072c689c31aace818d807699015f918c718c8f964736f6c63430008140033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212208f10615b181a6748e075e557c6172aaa30b212d87209c33973906e3f8813bad764736f6c63430008140033",
}

// TokenEntryPointFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenEntryPointFactoryMetaData.ABI instead.
var TokenEntryPointFactoryABI = TokenEntryPointFactoryMetaData.ABI

// TokenEntryPointFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenEntryPointFactoryMetaData.Bin instead.
var TokenEntryPointFactoryBin = TokenEntryPointFactoryMetaData.Bin

// DeployTokenEntryPointFactory deploys a new Ethereum contract, binding an instance of TokenEntryPointFactory to it.
func DeployTokenEntryPointFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address) (common.Address, *types.Transaction, *TokenEntryPointFactory, error) {
	parsed, err := TokenEntryPointFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenEntryPointFactoryBin), backend, _entryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenEntryPointFactory{TokenEntryPointFactoryCaller: TokenEntryPointFactoryCaller{contract: contract}, TokenEntryPointFactoryTransactor: TokenEntryPointFactoryTransactor{contract: contract}, TokenEntryPointFactoryFilterer: TokenEntryPointFactoryFilterer{contract: contract}}, nil
}

// TokenEntryPointFactory is an auto generated Go binding around an Ethereum contract.
type TokenEntryPointFactory struct {
	TokenEntryPointFactoryCaller     // Read-only binding to the contract
	TokenEntryPointFactoryTransactor // Write-only binding to the contract
	TokenEntryPointFactoryFilterer   // Log filterer for contract events
}

// TokenEntryPointFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenEntryPointFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenEntryPointFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenEntryPointFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenEntryPointFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenEntryPointFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenEntryPointFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenEntryPointFactorySession struct {
	Contract     *TokenEntryPointFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TokenEntryPointFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenEntryPointFactoryCallerSession struct {
	Contract *TokenEntryPointFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// TokenEntryPointFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenEntryPointFactoryTransactorSession struct {
	Contract     *TokenEntryPointFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// TokenEntryPointFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenEntryPointFactoryRaw struct {
	Contract *TokenEntryPointFactory // Generic contract binding to access the raw methods on
}

// TokenEntryPointFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenEntryPointFactoryCallerRaw struct {
	Contract *TokenEntryPointFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// TokenEntryPointFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenEntryPointFactoryTransactorRaw struct {
	Contract *TokenEntryPointFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenEntryPointFactory creates a new instance of TokenEntryPointFactory, bound to a specific deployed contract.
func NewTokenEntryPointFactory(address common.Address, backend bind.ContractBackend) (*TokenEntryPointFactory, error) {
	contract, err := bindTokenEntryPointFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointFactory{TokenEntryPointFactoryCaller: TokenEntryPointFactoryCaller{contract: contract}, TokenEntryPointFactoryTransactor: TokenEntryPointFactoryTransactor{contract: contract}, TokenEntryPointFactoryFilterer: TokenEntryPointFactoryFilterer{contract: contract}}, nil
}

// NewTokenEntryPointFactoryCaller creates a new read-only instance of TokenEntryPointFactory, bound to a specific deployed contract.
func NewTokenEntryPointFactoryCaller(address common.Address, caller bind.ContractCaller) (*TokenEntryPointFactoryCaller, error) {
	contract, err := bindTokenEntryPointFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointFactoryCaller{contract: contract}, nil
}

// NewTokenEntryPointFactoryTransactor creates a new write-only instance of TokenEntryPointFactory, bound to a specific deployed contract.
func NewTokenEntryPointFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenEntryPointFactoryTransactor, error) {
	contract, err := bindTokenEntryPointFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointFactoryTransactor{contract: contract}, nil
}

// NewTokenEntryPointFactoryFilterer creates a new log filterer instance of TokenEntryPointFactory, bound to a specific deployed contract.
func NewTokenEntryPointFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenEntryPointFactoryFilterer, error) {
	contract, err := bindTokenEntryPointFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointFactoryFilterer{contract: contract}, nil
}

// bindTokenEntryPointFactory binds a generic wrapper to an already deployed contract.
func bindTokenEntryPointFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TokenEntryPointFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenEntryPointFactory *TokenEntryPointFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenEntryPointFactory.Contract.TokenEntryPointFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenEntryPointFactory *TokenEntryPointFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenEntryPointFactory.Contract.TokenEntryPointFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenEntryPointFactory *TokenEntryPointFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenEntryPointFactory.Contract.TokenEntryPointFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenEntryPointFactory *TokenEntryPointFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenEntryPointFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenEntryPointFactory *TokenEntryPointFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenEntryPointFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenEntryPointFactory *TokenEntryPointFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenEntryPointFactory.Contract.contract.Transact(opts, method, params...)
}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_TokenEntryPointFactory *TokenEntryPointFactoryCaller) EntryPoint(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenEntryPointFactory.contract.Call(opts, &out, "entryPoint")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_TokenEntryPointFactory *TokenEntryPointFactorySession) EntryPoint() (common.Address, error) {
	return _TokenEntryPointFactory.Contract.EntryPoint(&_TokenEntryPointFactory.CallOpts)
}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_TokenEntryPointFactory *TokenEntryPointFactoryCallerSession) EntryPoint() (common.Address, error) {
	return _TokenEntryPointFactory.Contract.EntryPoint(&_TokenEntryPointFactory.CallOpts)
}

// Get is a free data retrieval call binding the contract method 0x9ee01b5f.
//
// Solidity: function get(address owner, address sponsor, address[] whitelistedAddresses, uint256 salt) view returns(address, address)
func (_TokenEntryPointFactory *TokenEntryPointFactoryCaller) Get(opts *bind.CallOpts, owner common.Address, sponsor common.Address, whitelistedAddresses []common.Address, salt *big.Int) (common.Address, common.Address, error) {
	var out []interface{}
	err := _TokenEntryPointFactory.contract.Call(opts, &out, "get", owner, sponsor, whitelistedAddresses, salt)

	if err != nil {
		return *new(common.Address), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return out0, out1, err

}

// Get is a free data retrieval call binding the contract method 0x9ee01b5f.
//
// Solidity: function get(address owner, address sponsor, address[] whitelistedAddresses, uint256 salt) view returns(address, address)
func (_TokenEntryPointFactory *TokenEntryPointFactorySession) Get(owner common.Address, sponsor common.Address, whitelistedAddresses []common.Address, salt *big.Int) (common.Address, common.Address, error) {
	return _TokenEntryPointFactory.Contract.Get(&_TokenEntryPointFactory.CallOpts, owner, sponsor, whitelistedAddresses, salt)
}

// Get is a free data retrieval call binding the contract method 0x9ee01b5f.
//
// Solidity: function get(address owner, address sponsor, address[] whitelistedAddresses, uint256 salt) view returns(address, address)
func (_TokenEntryPointFactory *TokenEntryPointFactoryCallerSession) Get(owner common.Address, sponsor common.Address, whitelistedAddresses []common.Address, salt *big.Int) (common.Address, common.Address, error) {
	return _TokenEntryPointFactory.Contract.Get(&_TokenEntryPointFactory.CallOpts, owner, sponsor, whitelistedAddresses, salt)
}

// PaymasterImplementation is a free data retrieval call binding the contract method 0x8e3484d0.
//
// Solidity: function paymasterImplementation() view returns(address)
func (_TokenEntryPointFactory *TokenEntryPointFactoryCaller) PaymasterImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenEntryPointFactory.contract.Call(opts, &out, "paymasterImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PaymasterImplementation is a free data retrieval call binding the contract method 0x8e3484d0.
//
// Solidity: function paymasterImplementation() view returns(address)
func (_TokenEntryPointFactory *TokenEntryPointFactorySession) PaymasterImplementation() (common.Address, error) {
	return _TokenEntryPointFactory.Contract.PaymasterImplementation(&_TokenEntryPointFactory.CallOpts)
}

// PaymasterImplementation is a free data retrieval call binding the contract method 0x8e3484d0.
//
// Solidity: function paymasterImplementation() view returns(address)
func (_TokenEntryPointFactory *TokenEntryPointFactoryCallerSession) PaymasterImplementation() (common.Address, error) {
	return _TokenEntryPointFactory.Contract.PaymasterImplementation(&_TokenEntryPointFactory.CallOpts)
}

// TokenEntryPointImplementation is a free data retrieval call binding the contract method 0x4f8a633d.
//
// Solidity: function tokenEntryPointImplementation() view returns(address)
func (_TokenEntryPointFactory *TokenEntryPointFactoryCaller) TokenEntryPointImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenEntryPointFactory.contract.Call(opts, &out, "tokenEntryPointImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenEntryPointImplementation is a free data retrieval call binding the contract method 0x4f8a633d.
//
// Solidity: function tokenEntryPointImplementation() view returns(address)
func (_TokenEntryPointFactory *TokenEntryPointFactorySession) TokenEntryPointImplementation() (common.Address, error) {
	return _TokenEntryPointFactory.Contract.TokenEntryPointImplementation(&_TokenEntryPointFactory.CallOpts)
}

// TokenEntryPointImplementation is a free data retrieval call binding the contract method 0x4f8a633d.
//
// Solidity: function tokenEntryPointImplementation() view returns(address)
func (_TokenEntryPointFactory *TokenEntryPointFactoryCallerSession) TokenEntryPointImplementation() (common.Address, error) {
	return _TokenEntryPointFactory.Contract.TokenEntryPointImplementation(&_TokenEntryPointFactory.CallOpts)
}

// Create is a paid mutator transaction binding the contract method 0x296c2efa.
//
// Solidity: function create(address owner, address sponsor, address[] whitelistedAddresses, uint256 salt) returns(address tokenEntryPoint, address paymaster)
func (_TokenEntryPointFactory *TokenEntryPointFactoryTransactor) Create(opts *bind.TransactOpts, owner common.Address, sponsor common.Address, whitelistedAddresses []common.Address, salt *big.Int) (*types.Transaction, error) {
	return _TokenEntryPointFactory.contract.Transact(opts, "create", owner, sponsor, whitelistedAddresses, salt)
}

// Create is a paid mutator transaction binding the contract method 0x296c2efa.
//
// Solidity: function create(address owner, address sponsor, address[] whitelistedAddresses, uint256 salt) returns(address tokenEntryPoint, address paymaster)
func (_TokenEntryPointFactory *TokenEntryPointFactorySession) Create(owner common.Address, sponsor common.Address, whitelistedAddresses []common.Address, salt *big.Int) (*types.Transaction, error) {
	return _TokenEntryPointFactory.Contract.Create(&_TokenEntryPointFactory.TransactOpts, owner, sponsor, whitelistedAddresses, salt)
}

// Create is a paid mutator transaction binding the contract method 0x296c2efa.
//
// Solidity: function create(address owner, address sponsor, address[] whitelistedAddresses, uint256 salt) returns(address tokenEntryPoint, address paymaster)
func (_TokenEntryPointFactory *TokenEntryPointFactoryTransactorSession) Create(owner common.Address, sponsor common.Address, whitelistedAddresses []common.Address, salt *big.Int) (*types.Transaction, error) {
	return _TokenEntryPointFactory.Contract.Create(&_TokenEntryPointFactory.TransactOpts, owner, sponsor, whitelistedAddresses, salt)
}

// TokenEntryPointFactoryEntryPointCreatedIterator is returned from FilterEntryPointCreated and is used to iterate over the raw logs and unpacked data for EntryPointCreated events raised by the TokenEntryPointFactory contract.
type TokenEntryPointFactoryEntryPointCreatedIterator struct {
	Event *TokenEntryPointFactoryEntryPointCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenEntryPointFactoryEntryPointCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenEntryPointFactoryEntryPointCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenEntryPointFactoryEntryPointCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenEntryPointFactoryEntryPointCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenEntryPointFactoryEntryPointCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenEntryPointFactoryEntryPointCreated represents a EntryPointCreated event raised by the TokenEntryPointFactory contract.
type TokenEntryPointFactoryEntryPointCreated struct {
	Owner           common.Address
	TokenEntryPoint common.Address
	Paymaster       common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterEntryPointCreated is a free log retrieval operation binding the contract event 0x6069261d1e7f168b985591572adeb94fd3356d970997086ab9946f4555ddaa50.
//
// Solidity: event EntryPointCreated(address indexed owner, address tokenEntryPoint, address paymaster)
func (_TokenEntryPointFactory *TokenEntryPointFactoryFilterer) FilterEntryPointCreated(opts *bind.FilterOpts, owner []common.Address) (*TokenEntryPointFactoryEntryPointCreatedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _TokenEntryPointFactory.contract.FilterLogs(opts, "EntryPointCreated", ownerRule)
	if err != nil {
		return nil, err
	}
	return &TokenEntryPointFactoryEntryPointCreatedIterator{contract: _TokenEntryPointFactory.contract, event: "EntryPointCreated", logs: logs, sub: sub}, nil
}

// WatchEntryPointCreated is a free log subscription operation binding the contract event 0x6069261d1e7f168b985591572adeb94fd3356d970997086ab9946f4555ddaa50.
//
// Solidity: event EntryPointCreated(address indexed owner, address tokenEntryPoint, address paymaster)
func (_TokenEntryPointFactory *TokenEntryPointFactoryFilterer) WatchEntryPointCreated(opts *bind.WatchOpts, sink chan<- *TokenEntryPointFactoryEntryPointCreated, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _TokenEntryPointFactory.contract.WatchLogs(opts, "EntryPointCreated", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenEntryPointFactoryEntryPointCreated)
				if err := _TokenEntryPointFactory.contract.UnpackLog(event, "EntryPointCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEntryPointCreated is a log parse operation binding the contract event 0x6069261d1e7f168b985591572adeb94fd3356d970997086ab9946f4555ddaa50.
//
// Solidity: event EntryPointCreated(address indexed owner, address tokenEntryPoint, address paymaster)
func (_TokenEntryPointFactory *TokenEntryPointFactoryFilterer) ParseEntryPointCreated(log types.Log) (*TokenEntryPointFactoryEntryPointCreated, error) {
	event := new(TokenEntryPointFactoryEntryPointCreated)
	if err := _TokenEntryPointFactory.contract.UnpackLog(event, "EntryPointCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
